[
  {
    "text": "2024",
    "items": [
      {
        "text": "算法/树/翻转二叉树的两种解题思路",
        "link": "/post/63bc4318-ebbc-5441-ab77-37d4705e0af2",
        "createdAt": "2024-06-09 14:24:50",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:51"
      },
      {
        "text": "算法/树/二叉树算法概述",
        "link": "/post/7d001d04-2978-58c3-8b2d-2aedd27a1300",
        "createdAt": "2024-06-09 14:24:50",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:50"
      },
      {
        "text": "算法/链表/反转单链表：反转全部、反转前 N 个节点、反转一部分",
        "link": "/post/32a25aa6-b958-59f7-964b-33cc262560f0",
        "createdAt": "2024-06-09 13:41:32",
        "year": "2024",
        "updatedAt": "2024-06-09 13:41:32"
      },
      {
        "text": "算法/二叉树/二叉树算法概述",
        "link": "/post/6f964124-4281-5896-9c85-bef7889c1853",
        "createdAt": "2024-06-09 13:41:31",
        "year": "2024",
        "updatedAt": "2024-06-09 13:41:32"
      },
      {
        "text": "算法/基础/算法的复杂度评估",
        "link": "/post/913adb85-34cd-560c-bd9f-f0190c86de81",
        "createdAt": "2024-06-07 12:54:48",
        "year": "2024",
        "updatedAt": "2024-06-07 12:54:48"
      },
      {
        "text": "算法/基础/基本的数据结构",
        "link": "/post/0457a71b-6e9d-5a9b-a007-f6fc64c2a523",
        "createdAt": "2024-06-07 10:01:15",
        "year": "2024",
        "updatedAt": "2024-06-07 10:01:15"
      },
      {
        "text": "算法/树/二叉树的前后中序遍历详解",
        "link": "/post/b65bee99-7800-5167-88a2-c2cac2f47061",
        "createdAt": "2024-06-06 13:50:13",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:49",
        "description": "二叉树的前后中序遍历详解#算法/二叉树  #2023/06/06[!tip] 递归函数 可以理解为一个 指针递归顺序是不会变的前后中序是三个不同的时间点 或 时机[!tip] 移步至： #语雀  https://www.yuque.com/liguwe/agorithms/gzg70n2dxb..."
      },
      {
        "text": "算法/树/二叉树的两种解题思路",
        "link": "/post/ca21f673-03b2-586c-b334-2ab48bec490e",
        "createdAt": "2024-06-06 13:50:12",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:48",
        "description": "二叉树的两种解题思路#树/二叉树 #2023/06/06[!tip] 移步至： #语雀   https://www.yuque.com/liguwe/agorithms/nu6uaih4ff4cgdz9#cyYuw阅读原文https://liguwe.github.io/post/ca21f6..."
      },
      {
        "text": "算法/动态规划/最长递增子序列",
        "link": "/post/14fe0ff1-8842-5283-a9f7-fc11ffe78ea1",
        "createdAt": "2024-06-06 13:50:11",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:47",
        "description": "最长递增子序列#2023/03/24  #算法/动态规划[!tip] 移步至： #语雀   https://www.yuque.com/liguwe/agorithms/lapm7trwgfnfvys0另外可参考  [[最长递增子序列 + 俄罗斯套娃信封问题]]  ，内容有重复阅读原文http..."
      },
      {
        "text": "算法/动态规划/俄罗斯套娃：二维最长递增子序列",
        "link": "/post/0b8dc850-a493-515c-a1c0-c829410c6da2",
        "createdAt": "2024-06-06 13:50:11",
        "year": "2024",
        "updatedAt": "2024-06-09 14:24:46",
        "description": "俄罗斯套娃：二维最长递增子序列#算法/动态规划  #2023/03/24[!tip] 移步至： #语雀   https://www.yuque.com/liguwe/agorithms/xh82rz1hu7r84xl4另外参考 [[最长递增子序列 + 俄罗斯套娃信封问题]] ，内容有重复阅读原..."
      },
      {
        "text": "算法/动态规划/最长递增子序列 + 俄罗斯套娃信封问题",
        "link": "/post/bd4652d6-8954-5bf3-804d-0118ed1007be",
        "createdAt": "2024-06-06 09:42:00",
        "year": "2024",
        "updatedAt": "2024-06-06 13:50:14",
        "description": "最长递增子序列 + 俄罗斯套娃信封问题#算法/动态规划 #2023/03/24最长递增子序列https://leetcode.cn/problems/longest-increasing-subsequence/「子序列」和「子串」的区别：  子串一定是连续的，而子序列不一定是连续的数学归纳法..."
      },
      {
        "text": "算法/树/树的一些基本概念",
        "link": "/post/de7d537f-1a3d-572c-baaa-a98b3e5ff9d5",
        "createdAt": "2024-06-05 06:54:15",
        "year": "2024",
        "updatedAt": "2024-06-05 06:54:16"
      },
      {
        "text": "算法/树/二叉堆与优先级队列的关系",
        "link": "/post/5dd68a73-7991-5e3e-8bd6-3665771b24e5",
        "createdAt": "2024-06-05 06:54:15",
        "year": "2024",
        "updatedAt": "2024-06-05 06:54:15"
      },
      {
        "text": "算法/栈/翻转二叉树的两种解题思路",
        "link": "/post/5dad5968-f583-5c57-94ae-8aa692c69c9f",
        "createdAt": "2024-06-05 06:54:14",
        "year": "2024",
        "updatedAt": "2024-06-05 06:54:15"
      },
      {
        "text": "算法/框架/计算机算法的框架思维",
        "link": "/post/8fbc80cc-ba66-5782-9643-31f176a3fa0a",
        "createdAt": "2024-06-05 06:54:13",
        "year": "2024",
        "updatedAt": "2024-06-05 06:54:14"
      },
      {
        "text": "翻译/什么才是真正做事？",
        "link": "/post/bceddf09-da9a-5795-9c4c-bb640f2bc363",
        "createdAt": "2024-06-04 20:50:53",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:53"
      },
      {
        "text": "工具/Raycast 使用技巧总结",
        "link": "/post/cd4960fb-1dd9-596f-b65a-96387bf6fe0a",
        "createdAt": "2024-06-04 20:50:52",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:52"
      },
      {
        "text": "工具/Manico 快捷键",
        "link": "/post/4424154a-634d-5616-9c99-cbda52018d09",
        "createdAt": "2024-06-04 20:50:51",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:51"
      },
      {
        "text": "工具/Obsidian 快捷键",
        "link": "/post/151a786a-a63e-5388-ada4-27be5aef5c4e",
        "createdAt": "2024-06-04 20:50:51",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:51"
      },
      {
        "text": "工具/Github Copilot 使用技巧总结",
        "link": "/post/3fd1b909-88c4-53e8-835c-1adbccf5cffc",
        "createdAt": "2024-06-04 20:50:50",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:50"
      },
      {
        "text": "工具/Arc 浏览器使用技巧总结",
        "link": "/post/a02c5897-1801-55ac-b0e0-6b4194b067fb",
        "createdAt": "2024-06-04 20:50:49",
        "year": "2024",
        "updatedAt": "2024-06-05 09:54:41",
        "description": "Arc 浏览器使用技巧总结#常用工具 #工具 #工具技巧 #浏览器  #2023/11/25网站搜索 可以配置，直接配置百度，京东搜索，但一般用不着，直接谷歌就好了 命令行 可以完成任何操作Command-T → Tab，然后输入具体命令 空间 点击侧边栏底部的空间图标，进行添加可以通过 Co..."
      },
      {
        "text": "播客/AI 时代的频率跃迁背景下个人的选择：高频的卷或低频的定",
        "link": "/post/2888c80f-b109-5a54-bdbe-7c97a407ab59",
        "createdAt": "2024-06-04 20:50:49",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:49"
      },
      {
        "text": "播客/张云帆的芒格之道",
        "link": "/post/3a29791d-db02-5ceb-acd0-6bf884b409ac",
        "createdAt": "2024-05-29 16:14:28",
        "year": "2024",
        "updatedAt": "2024-06-04 20:50:53",
        "description": "张云帆的芒格之道#播客 #2023/12/23一、知行合一人生的终极哲学是芒格所说「知行合一」  ：不仅能把事情做成，人生也是自恰的对知识诚实，知道就是知道，不知道就是不知道。知之为知之，不知为不知读书不会带来改变，思考不会带来改变，只有读书后的思考而带来的行动才会对生活有改变（即知行合一）对..."
      },
      {
        "text": "播客/人生危机不是崩溃而是瓦解",
        "link": "/post/040db9fb-a8f0-5bb4-b006-3efdf2bec160",
        "createdAt": "2024-05-29 16:14:28",
        "year": "2024",
        "updatedAt": "2024-05-29 16:14:28"
      },
      {
        "text": "前端/性能/长列表或大数据渲染优化的一些思路",
        "link": "/post/4214e1f9-529d-5201-b575-248082694fd6",
        "createdAt": "2024-05-29 16:14:27",
        "year": "2024",
        "updatedAt": "2024-05-29 16:14:27"
      },
      {
        "text": "思维模型/机会成本与沉没成本",
        "link": "/post/57d16359-e2d9-50e3-b2e5-471c38db8b70",
        "createdAt": "2024-05-04 08:00:58",
        "year": "2024",
        "updatedAt": "2024-05-04 08:00:58"
      },
      {
        "text": "播客/Same as Ever 得到听书笔记",
        "link": "/post/27b086f5-4074-5ef2-908e-f697b587b80b",
        "createdAt": "2024-05-04 08:00:57",
        "year": "2024",
        "updatedAt": "2024-07-05 12:33:19"
      },
      {
        "text": "前端/Vue/Pinia状态管理库文档笔记",
        "link": "/post/b3055a75-f4cc-52a0-93da-90e2eb1c913f",
        "createdAt": "2024-05-04 08:00:56",
        "year": "2024",
        "updatedAt": "2024-05-04 08:00:57"
      },
      {
        "text": "英语/语法/英语兔语法",
        "link": "/post/15964b35-23bc-56d4-97db-1c4eacb8ea9e",
        "createdAt": "2024-05-02 18:44:34",
        "year": "2024",
        "updatedAt": "2024-05-05 07:38:18"
      },
      {
        "text": "算法/动态规划/斐波那契数列",
        "link": "/post/e424cba0-1726-5c35-bbb3-89cca880de82",
        "createdAt": "2024-05-02 18:44:33",
        "year": "2024",
        "updatedAt": "2024-05-05 07:38:27"
      },
      {
        "text": "算法/动态规划/最小硬币数&凑零钱问题",
        "link": "/post/164a9949-66e8-5cb8-99a0-148862c9c79a",
        "createdAt": "2024-05-02 18:44:33",
        "year": "2024",
        "updatedAt": "2024-05-05 07:38:22"
      },
      {
        "text": "工具/Obsidina快捷键",
        "link": "/post/e6506cdb-35eb-5497-ae29-ed5a2abf969f",
        "createdAt": "2024-05-02 18:44:32",
        "year": "2024",
        "updatedAt": "2024-05-05 07:38:31"
      },
      {
        "text": "前端/架构/前端框架设计里的\"权衡\" 与\"选择\"",
        "link": "/post/da84854d-ebb9-5579-8c43-48155fe3f2f7",
        "createdAt": "2024-05-02 18:44:31",
        "year": "2024",
        "updatedAt": "2024-06-09 13:41:31",
        "description": "前端框架设计里的\"权衡\" 与\"选择\"#vue #前端架构  #2023/03/171、命令式框架与声明式框架Jquery 就是典型的 命令式框架，关注过程Vue 暴露给用户使用的是 声明式 ，但底层内部实现肯定也是 命令式 ，如下示例：面向用户的是声明式的<template>   <div @..."
      },
      {
        "text": "前端/Vue/Vue3 框架设计的核心要素",
        "link": "/post/a78f947d-5133-509b-a4a5-39e89591a91c",
        "createdAt": "2024-05-02 18:44:31",
        "year": "2024",
        "updatedAt": "2024-05-05 08:36:31",
        "description": "Vue3 框架设计的核心要素#前端 #前端框架  #vue  #2023/03/19以Vue3 为例，对于开发一个前端框架来说，有哪些核心要素呢？ 如下：1、开发体验报错警告提示，是否能够让开发者立马定位到问题比如 如何提示 App.mount('#app') 中 #app 节点 不存在开发调..."
      },
      {
        "text": "前端/Vue/Vue 的整体设计思路",
        "link": "/post/29a73693-d417-57af-bb3a-6efd95b22d93",
        "createdAt": "2024-05-02 18:44:30",
        "year": "2024",
        "updatedAt": "2024-07-05 12:33:15"
      },
      {
        "text": "前端/Typescript/重新学习 Typescript",
        "link": "/post/a891fa95-1d24-524f-b241-c0cb7737d75e",
        "createdAt": "2024-05-02 18:44:29",
        "year": "2024",
        "updatedAt": "2024-05-02 18:44:30"
      },
      {
        "text": "前端/JavaScript/实现批量请求并控制最大并发数",
        "link": "/post/d7481637-7459-5c98-ba1f-5180cd1e0948",
        "createdAt": "2024-05-02 18:44:28",
        "year": "2024",
        "updatedAt": "2024-05-02 18:44:29"
      },
      {
        "text": "前端/JavaScript/如何检测页面是否在前台运行（检测页面的可见性）",
        "link": "/post/9b12ad6f-17a2-58f2-bb9d-872e12428196",
        "createdAt": "2024-05-02 18:44:28",
        "year": "2024",
        "updatedAt": "2024-05-02 18:44:28"
      },
      {
        "text": "前端/JavaScript/为什么要用 setTimeout 模拟 setInterval ？",
        "link": "/post/e5a02817-e232-5d13-a043-455e0e4140e6",
        "createdAt": "2024-05-02 18:44:27",
        "year": "2024",
        "updatedAt": "2024-05-02 18:44:27"
      },
      {
        "text": "前端/CSS/回流和重绘",
        "link": "/post/465a49b1-860d-5c7e-a763-b8a32555fa08",
        "createdAt": "2024-05-02 18:44:26",
        "year": "2024",
        "updatedAt": "2024-05-02 18:44:26"
      }
    ],
    "collapsed": true
  }
]
