import{_ as e,D as s,c,I as t,w as i,a,l,a5 as r,o as n}from"./chunks/framework.CzeBWW5X.js";const y=JSON.parse('{"title":"计算机算法的框架思维","description":"","frontmatter":{},"headers":[],"relativePath":"post/8fbc80cc-ba66-5782-9643-31f176a3fa0a.md","filePath":"post/8fbc80cc-ba66-5782-9643-31f176a3fa0a.md"}'),d={name:"post/8fbc80cc-ba66-5782-9643-31f176a3fa0a.md"},u=l("h1",{id:"计算机算法的框架思维",tabindex:"-1"},[a("计算机算法的框架思维 "),l("a",{class:"header-anchor",href:"#计算机算法的框架思维","aria-label":'Permalink to "计算机算法的框架思维"'},"​")],-1),g={class:"tip custom-block github-alert"},h=l("p",{class:"custom-block-title"},"TIP",-1),p=l("a",{href:"https://www.yuque.com/liguwe/agorithms/lcon8zy9vpocx0ak",target:"_blank",rel:"noreferrer"},"https://www.yuque.com/liguwe/agorithms/lcon8zy9vpocx0ak",-1),m=r('<h2 id="先分清两种算法" tabindex="-1">先分清两种算法 <a class="header-anchor" href="#先分清两种算法" aria-label="Permalink to &quot;先分清两种算法&quot;">​</a></h2><p>先分清，两种算法，他们是<strong>完全不同的思维</strong></p><ul><li>计算机算法 <ul><li>本质是 <strong>穷举</strong> ，因为计算机就是<strong>快</strong></li><li>难点 <ul><li>一些算法的<strong>难点</strong>是<strong>如何”无遗漏“的穷举所有可能</strong></li><li>一些算法的难点是<strong>如何”聪明“的穷举</strong></li></ul></li></ul></li><li>数学算法 <ul><li>本质是 <strong>数学</strong></li><li>学数学的 <strong>后遗症</strong> ， 别想着 能不能推导出一个什么数学公式</li></ul></li></ul><h2 id="如何-无遗漏-的穷举所有" tabindex="-1">如何”无遗漏“的穷举所有 <a class="header-anchor" href="#如何-无遗漏-的穷举所有" aria-label="Permalink to &quot;如何”无遗漏“的穷举所有&quot;">​</a></h2><p>如递归类问题，最典型的是动态规划问题，它的<strong>状态转移方程</strong>是<strong>最难</strong>写出来的</p><h2 id="技巧-如何-聪明-的穷举" tabindex="-1">技巧：如何”聪明“的穷举 <a class="header-anchor" href="#技巧-如何-聪明-的穷举" aria-label="Permalink to &quot;技巧：如何”聪明“的穷举&quot;">​</a></h2><p>至少 二分查找、快慢指针、左右指针、滑动窗口、前缀和数组、差分数组，这些你得知道</p><h3 id="数组链表技巧" tabindex="-1">数组链表技巧 <a class="header-anchor" href="#数组链表技巧" aria-label="Permalink to &quot;数组链表技巧&quot;">​</a></h3><ul><li>双指针<strong>技巧</strong><ul><li>快慢指针<strong>技巧</strong></li><li>前后指针<strong>技巧</strong></li></ul></li><li>二分搜索<strong>技巧</strong></li><li>前缀和<strong>技巧</strong></li><li>差分数组<strong>技巧</strong></li></ul><p>如下图： <img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202401281609637.png" alt="image.png|360|600|390|705"></p><h3 id="二叉树技巧" tabindex="-1">二叉树技巧 <a class="header-anchor" href="#二叉树技巧" aria-label="Permalink to &quot;二叉树技巧&quot;">​</a></h3><h4 id="两种思路" tabindex="-1">两种思路 <a class="header-anchor" href="#两种思路" aria-label="Permalink to &quot;两种思路&quot;">​</a></h4><ul><li>遍历的思路</li><li>分解问题的思路</li></ul><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202401281612026.png" alt="image.png|750"></p><h4 id="前序遍历的-遍历思路-和-分解问题思路" tabindex="-1">前序遍历的 <strong>遍历思路</strong> 和 <strong>分解问题思路</strong> <a class="header-anchor" href="#前序遍历的-遍历思路-和-分解问题思路" aria-label="Permalink to &quot;前序遍历的 **遍历思路** 和 **分解问题思路**&quot;">​</a></h4><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202401281614176.png" alt="image.png|720"></p><blockquote><p>[!bug] 是的，避免死磕，难道用锯子去挖石头，因为技巧储备还不够，一切是徒劳，很多属于会者不难。</p></blockquote><h2 id="算法与数据结构" tabindex="-1">算法与数据结构 <a class="header-anchor" href="#算法与数据结构" aria-label="Permalink to &quot;算法与数据结构&quot;">​</a></h2><ul><li>各种算法像是精美的<strong>拼图</strong></li><li>而数据结构是组成这些拼图的<strong>模块</strong></li></ul><h3 id="其实底层就两种存储方式-链表-数组" tabindex="-1">其实底层就两种存储方式：链表 + 数组 <a class="header-anchor" href="#其实底层就两种存储方式-链表-数组" aria-label="Permalink to &quot;其实底层就两种存储方式：链表 + 数组&quot;">​</a></h3><ul><li>链表（链式存储） <ul><li>栈、队列：可用 <code>链表</code>实现</li><li>散列表： 可用<code>链表：拉链法</code>实现</li><li>图：可使用 <code>链表：邻接表</code>实现</li><li>树 <ul><li>堆（完全二叉树） <ul><li>可使用<code>数组</code>实现吗</li></ul></li><li>非完全二叉树 <ul><li>可使用<code>链表</code>实现</li></ul></li></ul></li></ul></li><li>数组（顺序存储） <ul><li>栈、队列：也可以<code>数组</code>实现</li><li>散列表： 也可用<code>数组：线性探测法</code>实现</li><li>图：可使用 <code>数组：邻接矩阵</code> 实现</li><li>树 <ul><li>堆（完全二叉树） <ul><li>可使用<code>数组</code>实现</li></ul></li></ul></li></ul></li></ul><div class="info custom-block github-alert"><p class="custom-block-title">INFO</p><p>1、上面的对应关系，旨在说明 数据存储 底层就两种存储方式：数组 和 链表 2、数组和链表才是「结构基础」</p></div><h3 id="数据结构操作-其实就遍历-访问-增删改查-两种" tabindex="-1">数据结构操作：其实就<strong>遍历 + 访问（增删改查）</strong> 两种 <a class="header-anchor" href="#数据结构操作-其实就遍历-访问-增删改查-两种" aria-label="Permalink to &quot;数据结构操作：其实就**遍历 + 访问（增删改查）** 两种&quot;">​</a></h3><ul><li>两种基本操作 <ul><li>遍历 ，遍历又分两种 <ul><li>线性迭代遍历</li><li>非线性递归遍历</li></ul></li><li>访问（增删查改） <ul><li>数据结构存在的使命，不就是 尽可能高效的增删查改</li></ul></li></ul></li></ul><h4 id="所有的遍历框架" tabindex="-1">所有的遍历框架 <a class="header-anchor" href="#所有的遍历框架" aria-label="Permalink to &quot;所有的遍历框架&quot;">​</a></h4><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202401281631690.png" alt="image.png|780"></p><hr>',27),b=l("div",{class:"liguwe-doc-footer"},[l("div",{class:"liguwe-doc-footer-edit-link"},[l("p",{class:"liguwe-doc-footer-p"},[l("svg",{t:"1687912573060",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"1498"},[l("path",{d:"M854.6 370.6c-9.9-39.4 9.9-102.2 73.4-124.4l-67.9-3.6s-25.7-90-143.6-98c-117.8-8.1-194.9-3-195-3 0.1 0 87.4 55.6 52.4 154.7-25.6 52.5-65.8 95.6-108.8 144.7-1.3 1.3-2.5 2.6-3.5 3.7C319.4 605 96 860 96 860c245.9 64.4 410.7-6.3 508.2-91.1 20.5-0.2 35.9-0.3 46.3-0.3 135.8 0 250.6-117.6 245.9-248.4-3.2-89.9-31.9-110.2-41.8-149.6z m-204.1 334c-10.6 0-26.2 0.1-46.8 0.3l-23.6 0.2-17.8 15.5c-47.1 41-104.4 71.5-171.4 87.6-52.5 12.6-110 16.2-172.7 9.6 18-20.5 36.5-41.6 55.4-63.1 92-104.6 173.8-197.5 236.9-268.5l1.4-1.4 1.3-1.5c4.1-4.6 20.6-23.3 24.7-28.1 9.7-11.1 17.3-19.9 24.5-28.6 30.7-36.7 52.2-67.8 69-102.2l1.6-3.3 1.2-3.4c13.7-38.8 15.4-76.9 6.2-112.8 22.5 0.7 46.5 1.9 71.7 3.6 33.3 2.3 55.5 12.9 71.1 29.2 5.8 6 10.2 12.5 13.4 18.7 1 2 1.7 3.6 2.3 5l5 17.7c-15.7 34.5-19.9 73.3-11.4 107.2 3 11.8 6.9 22.4 12.3 34.4 2.1 4.7 9.5 20.1 11 23.3 10.3 22.7 15.4 43 16.7 78.7 3.3 94.6-82.7 181.9-182 181.9z","p-id":"1499"})]),l("a",{href:"https://www.yuque.com/liguwe/post/8fbc80cc-ba66-5782-9643-31f176a3fa0a",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," View this page on Yuque（语雀） ")]),l("p",{class:"liguwe-doc-footer-p"},[l("svg",{t:"1687913054251",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"5173"},[l("path",{d:"M853.333333 501.333333c-17.066667 0-32 14.933333-32 32v320c0 6.4-4.266667 10.666667-10.666666 10.666667H170.666667c-6.4 0-10.666667-4.266667-10.666667-10.666667V213.333333c0-6.4 4.266667-10.666667 10.666667-10.666666h320c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32H170.666667c-40.533333 0-74.666667 34.133333-74.666667 74.666666v640c0 40.533333 34.133333 74.666667 74.666667 74.666667h640c40.533333 0 74.666667-34.133333 74.666666-74.666667V533.333333c0-17.066667-14.933333-32-32-32z","p-id":"5174"}),l("path",{d:"M405.333333 484.266667l-32 125.866666c-2.133333 10.666667 0 23.466667 8.533334 29.866667 6.4 6.4 14.933333 8.533333 23.466666 8.533333h8.533334l125.866666-32c6.4-2.133333 10.666667-4.266667 14.933334-8.533333l300.8-300.8c38.4-38.4 38.4-102.4 0-140.8-38.4-38.4-102.4-38.4-140.8 0L413.866667 469.333333c-4.266667 4.266667-6.4 8.533333-8.533334 14.933334z m59.733334 23.466666L761.6 213.333333c12.8-12.8 36.266667-12.8 49.066667 0 12.8 12.8 12.8 36.266667 0 49.066667L516.266667 558.933333l-66.133334 17.066667 14.933334-68.266667z","p-id":"5175"})]),l("a",{href:"https://github.com/liguwe/liguwe.github.io/blob/master/docs/8fbc80cc-ba66-5782-9643-31f176a3fa0a.md",target:"_blank",class:"liguwe-doc-footer-edit-link-a"},"Edit this page on Github")])]),l("div",{id:"liguwe-comment"})],-1);function f(_,w,q,k,x,v){const o=s("Badge");return n(),c("div",null,[u,t(o,{type:"warning"},{default:i(()=>[a("#2024/01/27")]),_:1}),a(),t(o,{type:"warning"},{default:i(()=>[a("#算法")]),_:1}),a(),t(o,{type:"warning"},{default:i(()=>[a("#算法框架")]),_:1}),l("div",g,[h,l("p",null,[a("另外可参考： "),t(o,{type:"danger"},{default:i(()=>[a("#语雀")]),_:1}),a(),p])]),m,b])}const V=e(d,[["render",f]]);export{y as __pageData,V as default};
