import{_ as t,D as i,c as s,I as c,w as d,a as o,l as e,a5 as l,o as r}from"./chunks/framework.CzeBWW5X.js";const v=JSON.parse('{"title":"Vue3 框架设计的核心要素","description":"","frontmatter":{},"headers":[],"relativePath":"post/a78f947d-5133-509b-a4a5-39e89591a91c.md","filePath":"post/a78f947d-5133-509b-a4a5-39e89591a91c.md"}'),p={name:"post/a78f947d-5133-509b-a4a5-39e89591a91c.md"},n=e("h1",{id:"vue3-框架设计的核心要素",tabindex:"-1"},[o("Vue3 框架设计的核心要素 "),e("a",{class:"header-anchor",href:"#vue3-框架设计的核心要素","aria-label":'Permalink to "Vue3 框架设计的核心要素"'},"​")],-1),h=l(`<p>以Vue3 为例，对于开发一个前端框架来说，有哪些<code>核心要素</code>呢？ 如下：</p><h2 id="_1、开发体验" tabindex="-1">1、开发体验 <a class="header-anchor" href="#_1、开发体验" aria-label="Permalink to &quot;1、开发体验&quot;">​</a></h2><p><strong>报错警告提示，是否能够让开发者立马定位到问题</strong></p><ul><li>比如 如何提示 <code>App.mount(&#39;#app&#39;)</code> 中 <code>#app</code> 节点 不存在</li></ul><p><strong>开发调试是否直观？</strong></p><ul><li>比如<code>const obj = ref()</code> ，每次都是打印 <code>obj</code>的值都需要 <code>obj.value</code> ? 框架层面肯定需要提供好的 log 方式。 <ul><li>DevTools 提供 <code>custom formmaters</code> ，框架层面会提供 <code>initCustomFormatter</code> 的定义</li></ul></li></ul><h2 id="_2、控制框架代码体积" tabindex="-1">2、控制框架代码体积 <a class="header-anchor" href="#_2、控制框架代码体积" aria-label="Permalink to &quot;2、控制框架代码体积&quot;">​</a></h2><p>如何做到开发环境下更多提示，而不增加代码体积呢？</p><p>需要使用 <code>roolup 插件</code> 或者 <code>webpack 插件</code> 的 <code>__DEV__常量</code> 来做到这一点，生成环境下形成 <code>dead code</code> , 在使用打包工具 <code>tree-shaking</code> 的能力，进行移除</p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p><code>dead code</code> 即 永远不会执行的代码，如 <code>if(true)</code> 或者 <code>import 后没使用的模块</code>等</p></div><h2 id="_3、良好的-tree-shaking-机制" tabindex="-1">3、良好的 <code>tree-shaking</code> 机制 <a class="header-anchor" href="#_3、良好的-tree-shaking-机制" aria-label="Permalink to &quot;3、良好的 \`tree-shaking\` 机制&quot;">​</a></h2><p>上面说的<code>dead code</code> 很容易 被 <code>tree-shaking</code>掉，但是<code>副作用</code> 呢，因为 <code>proxy</code> 能力<code>只读每个属性</code>也可能引起<code>副作用</code>。</p><p>答案是：<code>/*#__PURE__*/</code> ， <code>rollup</code> 和 <code>webpack</code> 、<code>terser</code> 都可以识别它 ，它告诉 打包工具，<code>放心 tree-shaking 掉吧</code></p><h2 id="_4、多种环境下的构建产物不一样" tabindex="-1">4、多种环境下的构建产物不一样 <a class="header-anchor" href="#_4、多种环境下的构建产物不一样" aria-label="Permalink to &quot;4、多种环境下的构建产物不一样&quot;">​</a></h2><p>比如：</p><ul><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>iife</code> 给 <code>script</code> 标签直接使用</li><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>esm</code> 给 <code>&lt;script type=&quot;module&quot;&gt;</code> 直接使用</li><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>cjs</code> 给 <code>nodejs</code> 环境使用 ，为了 SSR</li></ul><p>另外，如何打包给 <code>rollup</code> 或者 <code>webpack</code> 工具使用呢？ 答案是 <code>esm</code> , 但又如何 与 <code>&lt;script type=&quot;module&quot;&gt;</code> 区别呢？ 看 package.json , 如下 <code>代码</code> 和 <code>图片</code></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/vue.runtime.esm-bundler.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202303191018366.png" alt="image.png"></p><h2 id="_5、支持特性开关" tabindex="-1">5、支持特性开关 <a class="header-anchor" href="#_5、支持特性开关" aria-label="Permalink to &quot;5、支持特性开关&quot;">​</a></h2><p>比如vue3的 <code>组合式 API</code> 和 <code>选项式 API</code>， 如果用户确定只需要使用 <code>组合式 API</code> ，那么可以通过 设置 <code>__VUE_OPTIONS_API__</code> 预定于常量来开启或者关闭.</p><h2 id="_6、错误处理机制" tabindex="-1">6、错误处理机制 <a class="header-anchor" href="#_6、错误处理机制" aria-label="Permalink to &quot;6、错误处理机制&quot;">​</a></h2><p>比如一个工具库提供一个 <code>fetch</code> 方法 ，但使用的方式必须传入回调 <code>fetch(callback)</code>，怎么容错呢？三种</p><ol><li>用户自己 <code>try catch</code>，但是如果有很多方法，需要每个都 <code>try catch</code> 吗</li><li>用户自己实现一个 <code>handleError</code> 方法</li><li>工具库提一个 <code>utils.registerErrorHandler</code> 静态方法, 用户使用它注册错误处理程序。</li></ol><p>第 3 种，就是 Vue 的处理方式，<code>app.config.errorHandler</code> , 为用户提供更好的框架层面的健壮性。</p><h2 id="_7、typescript-支持" tabindex="-1">7、Typescript 支持 <a class="header-anchor" href="#_7、typescript-支持" aria-label="Permalink to &quot;7、Typescript 支持&quot;">​</a></h2><p>完善 Typescript 支持，可能比框架本身还要花精力和时间</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>《Vue.js 设计与实现》</li></ul><hr>`,30),u=e("div",{class:"liguwe-doc-footer"},[e("div",{class:"liguwe-doc-footer-edit-link"},[e("p",{class:"liguwe-doc-footer-p"},[e("svg",{t:"1687912573060",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"1498"},[e("path",{d:"M854.6 370.6c-9.9-39.4 9.9-102.2 73.4-124.4l-67.9-3.6s-25.7-90-143.6-98c-117.8-8.1-194.9-3-195-3 0.1 0 87.4 55.6 52.4 154.7-25.6 52.5-65.8 95.6-108.8 144.7-1.3 1.3-2.5 2.6-3.5 3.7C319.4 605 96 860 96 860c245.9 64.4 410.7-6.3 508.2-91.1 20.5-0.2 35.9-0.3 46.3-0.3 135.8 0 250.6-117.6 245.9-248.4-3.2-89.9-31.9-110.2-41.8-149.6z m-204.1 334c-10.6 0-26.2 0.1-46.8 0.3l-23.6 0.2-17.8 15.5c-47.1 41-104.4 71.5-171.4 87.6-52.5 12.6-110 16.2-172.7 9.6 18-20.5 36.5-41.6 55.4-63.1 92-104.6 173.8-197.5 236.9-268.5l1.4-1.4 1.3-1.5c4.1-4.6 20.6-23.3 24.7-28.1 9.7-11.1 17.3-19.9 24.5-28.6 30.7-36.7 52.2-67.8 69-102.2l1.6-3.3 1.2-3.4c13.7-38.8 15.4-76.9 6.2-112.8 22.5 0.7 46.5 1.9 71.7 3.6 33.3 2.3 55.5 12.9 71.1 29.2 5.8 6 10.2 12.5 13.4 18.7 1 2 1.7 3.6 2.3 5l5 17.7c-15.7 34.5-19.9 73.3-11.4 107.2 3 11.8 6.9 22.4 12.3 34.4 2.1 4.7 9.5 20.1 11 23.3 10.3 22.7 15.4 43 16.7 78.7 3.3 94.6-82.7 181.9-182 181.9z","p-id":"1499"})]),e("a",{href:"https://www.yuque.com/liguwe/post/a78f947d-5133-509b-a4a5-39e89591a91c",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," View this page on Yuque（语雀） ")]),e("p",{class:"liguwe-doc-footer-p"},[e("svg",{t:"1687913054251",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"5173"},[e("path",{d:"M853.333333 501.333333c-17.066667 0-32 14.933333-32 32v320c0 6.4-4.266667 10.666667-10.666666 10.666667H170.666667c-6.4 0-10.666667-4.266667-10.666667-10.666667V213.333333c0-6.4 4.266667-10.666667 10.666667-10.666666h320c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32H170.666667c-40.533333 0-74.666667 34.133333-74.666667 74.666666v640c0 40.533333 34.133333 74.666667 74.666667 74.666667h640c40.533333 0 74.666667-34.133333 74.666666-74.666667V533.333333c0-17.066667-14.933333-32-32-32z","p-id":"5174"}),e("path",{d:"M405.333333 484.266667l-32 125.866666c-2.133333 10.666667 0 23.466667 8.533334 29.866667 6.4 6.4 14.933333 8.533333 23.466666 8.533333h8.533334l125.866666-32c6.4-2.133333 10.666667-4.266667 14.933334-8.533333l300.8-300.8c38.4-38.4 38.4-102.4 0-140.8-38.4-38.4-102.4-38.4-140.8 0L413.866667 469.333333c-4.266667 4.266667-6.4 8.533333-8.533334 14.933334z m59.733334 23.466666L761.6 213.333333c12.8-12.8 36.266667-12.8 49.066667 0 12.8 12.8 12.8 36.266667 0 49.066667L516.266667 558.933333l-66.133334 17.066667 14.933334-68.266667z","p-id":"5175"})]),e("a",{href:"https://github.com/liguwe/liguwe.github.io/blob/master/docs/a78f947d-5133-509b-a4a5-39e89591a91c.md",target:"_blank",class:"liguwe-doc-footer-edit-link-a"},"Edit this page on Github")])]),e("div",{id:"liguwe-comment"})],-1);function g(k,m,_,b,f,E){const a=i("Badge");return r(),s("div",null,[n,c(a,{type:"info"},{default:d(()=>[o("#前端")]),_:1}),o(),c(a,{type:"danger"},{default:d(()=>[o("#前端框架")]),_:1}),o(),c(a,{type:"warning"},{default:d(()=>[o("#vue")]),_:1}),o(),c(a,{type:"info"},{default:d(()=>[o("#2023/03/19")]),_:1}),o(),h,u])}const w=t(p,[["render",g]]);export{v as __pageData,w as default};
