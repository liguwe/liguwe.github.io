import{o as a,c as e,F as n,r as d,u as i,a as o,b as s,t as l}from"./app.69d62d8a.js";const p=[{id:117542185,slug:"kayuuigb4gpzcl2b",title:"1.2 Programs Are Translated by Other Programs into Different Forms",book_id:36687938,book:{id:36687938,type:"Book",slug:"blog",name:"liguwe.github.io",user_id:687303,description:"liguwe's blog",creator_id:687303,public:1,items_count:3,likes_count:0,watches_count:0,content_updated_at:"2023-03-11T05:09:47.842Z",updated_at:"2023-03-11T05:11:05.000Z",created_at:"2023-03-11T03:13:50.000Z",namespace:"liguwe/blog",user:{id:687303,type:"User",login:"liguwe",name:"liguwe",description:"liguwe's blog",avatar_url:"https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1576742181690-f84f2cfb-31cd-4c3b-87b1-2e055b3f06a9.jpeg",books_count:13,public_books_count:1,followers_count:1,following_count:20,created_at:"2019-12-19T07:56:58.000Z",updated_at:"2023-03-11T03:55:57.000Z",_serializer:"v2.user"},_serializer:"v2.book"},user_id:687303,creator:{id:687303,type:"User",login:"liguwe",name:"liguwe",description:"liguwe's blog",avatar_url:"https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1576742181690-f84f2cfb-31cd-4c3b-87b1-2e055b3f06a9.jpeg",books_count:13,public_books_count:1,followers_count:1,following_count:20,created_at:"2019-12-19T07:56:58.000Z",updated_at:"2023-03-11T03:55:57.000Z",_serializer:"v2.user"},format:"lake",body:"The hello program begins life as a high-level C program because it can be read and understood by human beings in that form. However, in order to run `hello.c` on the system, the individual单独的 C statements must be translated by other programs into a sequence of low-level machine-language instructions. \n\nThese instructions are then packaged in a form called an executable object program and stored as a binary disk ﬁle. \n\nObject programs are also referred to as 也称为 executable object ﬁles.\n\nOn a Unix system, the translation from source ﬁle to object ﬁle is performed by a compiler driver:\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/687303/1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png#averageHue=%23f4f4f4&clientId=u6bb6df7b-79bb-4&from=paste&height=275&id=u2337d479&name=image.png&originHeight=824&originWidth=2088&originalType=binary&ratio=1&rotation=0&showTitle=false&size=149716&status=done&style=none&taskId=u4c194054-430a-42f4-8c78-b67e96dcfb9&title=&width=696)<br />Here, the gcc compiler driver reads the source ﬁle `hello.c` and translates it into an executable object ﬁle `hello`. The translation is performed in the sequence of four phases shown in Figure 1.3. The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known collectively  as the compilation system.\n\n- Preprocessing phase. The preprocessor (cpp) modiﬁes the original C program according to directives that begin with the `‘#’` character. For example, the `#include <stdio.h>` command in line 1 of `hello.c` tells the preprocessor to read the contents of the system header ﬁle `stdio.h` and insert it directly into the program text. The result is another C program, typically with the `.i` sufﬁx.\n- Compilation phase. The compiler (cc1) translates the text ﬁle `hello.i` into the text ﬁle hello.s, which contains an assembly-language program. This program includes the following deﬁnition of function main:\n\n      ![image.png](https://cdn.nlark.com/yuque/0/2022/png/687303/1668473023883-ca1d2b75-7b3b-45c2-aca5-b8c78c287524.png#averageHue=%23f3f3f3&clientId=u6bb6df7b-79bb-4&from=paste&height=141&id=u9aa8485a&name=image.png&originHeight=424&originWidth=716&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48400&status=done&style=none&taskId=u00b37ebe-ca07-4fbb-9857-8220bb88af5&title=&width=238.66666666666666)<br />       Each of lines 2–7 in this deﬁnition describes one low-level machine-language instruction in a textual form. Assembly language is useful because  it provides a common output language  for  different compilers  for different high-level languages.  For example, C compilers and Fortran compilers both generate output ﬁles in the same assembly language.\n\n- Assembly phase. Next, `the assembler S`   (as)   translates v `hello.s` into machine-language instructions,  packages v them in a form known as a relocatable object program 可重定位的目标程序, and stores the result in the object ﬁle `hello.o`.  This ﬁle is a binary ﬁle （containing 17 bytes） to encode 动词不定时？ the instructions for function main.  If we were to view hello.o with a text editor, it would appear to be gibberish.\n\n\n",body_draft:"The hello program begins life as a high-level C program because it can be read and understood by human beings in that form. However, in order to run `hello.c` on the system, the individual单独的 C statements must be translated by other programs into a sequence of low-level machine-language instructions. \n\nThese instructions are then packaged in a form called an executable object program and stored as a binary disk ﬁle. \n\nObject programs are also referred to as 也称为 executable object ﬁles.\n\nOn a Unix system, the translation from source ﬁle to object ﬁle is performed by a compiler driver:\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/687303/1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png#averageHue=%23f4f4f4&clientId=u6bb6df7b-79bb-4&from=paste&height=275&id=u2337d479&name=image.png&originHeight=824&originWidth=2088&originalType=binary&ratio=1&rotation=0&showTitle=false&size=149716&status=done&style=none&taskId=u4c194054-430a-42f4-8c78-b67e96dcfb9&title=&width=696)<br />Here, the gcc compiler driver reads the source ﬁle `hello.c` and translates it into an executable object ﬁle `hello`. The translation is performed in the sequence of four phases shown in Figure 1.3. The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known collectively  as the compilation system.\n\n- Preprocessing phase. The preprocessor (cpp) modiﬁes the original C program according to directives that begin with the `‘#’` character. For example, the `#include <stdio.h>` command in line 1 of `hello.c` tells the preprocessor to read the contents of the system header ﬁle `stdio.h` and insert it directly into the program text. The result is another C program, typically with the `.i` sufﬁx.\n- Compilation phase. The compiler (cc1) translates the text ﬁle `hello.i` into the text ﬁle hello.s, which contains an assembly-language program. This program includes the following deﬁnition of function main:\n\n      ![image.png](https://cdn.nlark.com/yuque/0/2022/png/687303/1668473023883-ca1d2b75-7b3b-45c2-aca5-b8c78c287524.png#averageHue=%23f3f3f3&clientId=u6bb6df7b-79bb-4&from=paste&height=141&id=u9aa8485a&name=image.png&originHeight=424&originWidth=716&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48400&status=done&style=none&taskId=u00b37ebe-ca07-4fbb-9857-8220bb88af5&title=&width=238.66666666666666)<br />       Each of lines 2–7 in this deﬁnition describes one low-level machine-language instruction in a textual form. Assembly language is useful because  it provides a common output language  for  different compilers  for different high-level languages.  For example, C compilers and Fortran compilers both generate output ﬁles in the same assembly language.\n\n- Assembly phase. Next, `the assembler S`   (as)   translates v `hello.s` into machine-language instructions,  packages v them in a form known as a relocatable object program 可重定位的目标程序, and stores the result in the object ﬁle `hello.o`.  This ﬁle is a binary ﬁle （containing 17 bytes） to encode 动词不定时？ the instructions for function main.  If we were to view hello.o with a text editor, it would appear to be gibberish.\n\n\n",body_html:'<!doctype html><div class="lake-content" typography="classic"><p id="ucdace451" class="ne-p"><span class="ne-text">The hello program begins life as a high-level C program </span><span class="ne-text" style="text-decoration: underline">because</span><span class="ne-text"> it can be read and understood by human beings in that form. However, in order to run </span><code class="ne-code"><span class="ne-text">hello.c</span></code><span class="ne-text"> on the system, the </span><span class="ne-text" style="color: #E8323C">individual</span><sup><span class="ne-text" style="color: #E8323C">单独的</span></sup><span class="ne-text"> C statements must be translated by other programs into a sequence of low-level machine-language instructions. </span></p><p id="u1816b331" class="ne-p"><span class="ne-text"></span></p><p id="u84ac3ad7" class="ne-p"><span class="ne-text">These instructions are then packaged in a form </span><span class="ne-text" style="text-decoration: underline">called</span><span class="ne-text"> an executable object program and stored as a binary disk ﬁle. </span></p><p id="u90f6a1e0" class="ne-p"><span class="ne-text"></span></p><p id="u8b90bc08" class="ne-p"><span class="ne-text">Object programs </span><span class="ne-text" style="text-decoration: underline">are also referred to as </span><sup><span class="ne-text" style="text-decoration: underline">也称为</span></sup><span class="ne-text"> executable object ﬁles.</span></p><p id="u704a7308" class="ne-p"><span class="ne-text"></span></p><p id="u346670aa" class="ne-p"><span class="ne-text">On a Unix system, the translation from source ﬁle to object ﬁle is performed by a compiler driver:</span></p><p id="ue9619857" class="ne-p"><span class="ne-text"></span></p><p id="uaf9afed8" class="ne-p"><img src="https://cdn.nlark.com/yuque/0/2022/png/687303/1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png" width="696" id="u2337d479" class="ne-image"></p><p id="ude92f498" class="ne-p"><span class="ne-text">Here, the gcc compiler driver reads the source ﬁle </span><code class="ne-code"><span class="ne-text">hello.c</span></code><span class="ne-text"> and translates it into an executable object ﬁle </span><code class="ne-code"><span class="ne-text">hello</span></code><span class="ne-text">. The translation is performed in the sequence of four phases shown in Figure 1.3. The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known </span><span class="ne-text" style="color: #E8323C">collectively</span><span class="ne-text">  as the compilation system.</span></p><ul class="ne-ul"><li id="u66a50d9d"><span class="ne-text">Preprocessing phase. The preprocessor (cpp) modiﬁes the original C program according to directives </span><span class="ne-text" style="text-decoration: underline">that</span><span class="ne-text"> begin with the </span><code class="ne-code"><span class="ne-text">‘#’</span></code><span class="ne-text"> character. For example, the </span><code class="ne-code"><span class="ne-text">#include &lt;stdio.h&gt;</span></code><span class="ne-text"> command in line 1 of </span><code class="ne-code"><span class="ne-text">hello.c</span></code><span class="ne-text"> tells the preprocessor to read the contents of the system header ﬁle </span><code class="ne-code"><span class="ne-text">stdio.h</span></code><span class="ne-text"> and insert it directly into the program text. The result is another C program, typically with the </span><code class="ne-code"><span class="ne-text">.i</span></code><span class="ne-text"> sufﬁx.</span></li><li id="u9979dc30"><span class="ne-text" style="color: #E8323C">Compilation</span><span class="ne-text"> phase. The compiler (cc1) translates the text ﬁle </span><code class="ne-code"><span class="ne-text">hello.i</span></code><span class="ne-text"> into the text ﬁle hello.s, which contains an assembly-language program. This program includes the following deﬁnition of function main:</span></li></ul><p id="u611e3647" class="ne-p" style="text-align: left"><span class="ne-text">      </span><img src="https://cdn.nlark.com/yuque/0/2022/png/687303/1668473023883-ca1d2b75-7b3b-45c2-aca5-b8c78c287524.png" width="238.66666666666666" id="u9aa8485a" class="ne-image"></p><p id="uc5005d4a" class="ne-p" style="text-align: left"><span class="ne-text">       Each of lines 2–7 in this deﬁnition describes one low-level machine-language instruction in a textual form. Assembly language is useful </span><span class="ne-text" style="text-decoration: underline">because</span><span class="ne-text">  it provides a common output language  </span><span class="ne-text" style="text-decoration: underline">for</span><span class="ne-text">  different compilers </span><span class="ne-text" style="text-decoration: underline"> for</span><span class="ne-text"> different high-level languages.  For example, C compilers and Fortran compilers both generate output ﬁles in the same assembly language.</span></p><ul class="ne-ul"><li id="uc96eebf7" style="text-align: left"><span class="ne-text">Assembly phase. Next, </span><code class="ne-code"><span class="ne-text">the assembler </span><sup><span class="ne-text">S</span></sup></code><span class="ne-text">  </span><span class="ne-text" style="background-color: #BA9BF2"> (as)</span><span class="ne-text">   </span><span class="ne-text" style="color: #E8323C">translates </span><sup><span class="ne-text" style="color: #E8323C">v</span></sup><span class="ne-text"> </span><code class="ne-code"><span class="ne-text">hello.s</span></code><span class="ne-text"> into machine-language instructions,  </span><span class="ne-text" style="color: #E8323C">packages </span><sup><span class="ne-text" style="color: #E8323C">v</span></sup><span class="ne-text"> them in a form known as </span><span class="ne-text" style="text-decoration: underline">a relocatable object program 可重定位的目标程序,</span><span class="ne-text"> and stores the result in the object ﬁle </span><code class="ne-code"><span class="ne-text">hello.o</span></code><span class="ne-text">.  This ﬁle is a binary ﬁle （containing 17 bytes） </span><span class="ne-text" style="color: #E8323C">to encode </span><sup><span class="ne-text" style="color: #E8323C">动词不定时？</span></sup><span class="ne-text"> the instructions for function main.  If we were to view hello.o with a text editor, it would appear to be gibberish.</span></li></ul><p id="uec93bc1f" class="ne-p"><br></p><p id="u321f9c1c" class="ne-p"><br></p></div>',body_lake:'<!doctype lake><meta name="doc-version" content="1" /><meta name="typography" content="classic" /><meta name="viewport" content="fixed" /><meta name="paragraphSpacing" content="relax" /><p data-lake-id="ucdace451" id="ucdace451"><span data-lake-id="u9ace02c0" id="u9ace02c0">The hello program begins life as a high-level C program </span><u><span data-lake-id="u81a9f2a3" id="u81a9f2a3">because</span></u><span data-lake-id="u89c376b2" id="u89c376b2"> it can be read and understood by human beings in that form. However, in order to run </span><code data-lake-id="u28576b3e" id="u28576b3e"><span data-lake-id="u4e6b4e07" id="u4e6b4e07">hello.c</span></code><span data-lake-id="u5535c4ff" id="u5535c4ff"> on the system, the </span><span data-lake-id="ub1d28279" id="ub1d28279" style="color: #E8323C">individual</span><sup><span data-lake-id="u151e7927" id="u151e7927" style="color: #E8323C">单独的</span></sup><span data-lake-id="ub73bedeb" id="ub73bedeb"> C statements must be translated by other programs into a sequence of low-level machine-language instructions. </span></p><p data-lake-id="u1816b331" id="u1816b331"><span data-lake-id="u2ad42801" id="u2ad42801">​</span><br></p><p data-lake-id="u84ac3ad7" id="u84ac3ad7"><span data-lake-id="u1bedcbc7" id="u1bedcbc7">These instructions are then packaged in a form </span><u><span data-lake-id="u46545da4" id="u46545da4">called</span></u><span data-lake-id="uc37ed434" id="uc37ed434"> an executable object program and stored as a binary disk ﬁle. </span></p><p data-lake-id="u90f6a1e0" id="u90f6a1e0"><span data-lake-id="ud27a8494" id="ud27a8494">​</span><br></p><p data-lake-id="u8b90bc08" id="u8b90bc08"><span data-lake-id="u95d447a7" id="u95d447a7">Object programs </span><u><span data-lake-id="u32f77516" id="u32f77516">are also referred to as </span></u><u><sup><span data-lake-id="u6d7e7d49" id="u6d7e7d49">也称为</span></sup></u><span data-lake-id="ub328dabb" id="ub328dabb"> executable object ﬁles.</span></p><p data-lake-id="u704a7308" id="u704a7308"><span data-lake-id="u6dfabcee" id="u6dfabcee">​</span><br></p><p data-lake-id="u346670aa" id="u346670aa"><span data-lake-id="u3a85462c" id="u3a85462c">On a Unix system, the translation from source ﬁle to object ﬁle is performed by a compiler driver:</span></p><p data-lake-id="ue9619857" id="ue9619857"><span data-lake-id="ua11c2160" id="ua11c2160">​</span><br></p><p data-lake-id="uaf9afed8" id="uaf9afed8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F687303%2F1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png%22%2C%22taskId%22%3A%22u4c194054-430a-42f4-8c78-b67e96dcfb9%22%2C%22clientId%22%3A%22u6bb6df7b-79bb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A696%2C%22height%22%3A275%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A149716%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2088%2C%22originHeight%22%3A824%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SECTION%201.2%20PROGRAMS%20ARE%20TRANSLATED%20BY%20OTHER%20PROGRAMS%20INTO%20DIFFERENT%20FORMS%20PRINTF.O%20PRE-%20HELLO.C%20HELLO.I%20HE1LO%20HELLO.S%20HELLO.0%20COMPILER%20ASSEMBLER%20LINKER%20PROCESSOR%20(AS)%20(CC1)%20(1D)%20(CPP)%20ASSEMBLY%20SOURCE%20MODIFIED%20RELOCATABLE%20EXECUTABLE%20PROGRAM%20OBJECT%20OBJECT%20PROGRAM%20SOURCE%20(TEXT)%20(TEXT)%20PROGRAM%20PROGRAM%20PROGRAMS%20(TEXT)%20(BINARY)%20(BINARY)%20FIGURE%201.3%20THE%20COMPILATION%20SYSTEM.%20LINUX%3E%20GCC%20-O%20HELLO%20HELLO.C%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A656.05695%2C%22y%22%3A60.696392%2C%22width%22%3A205.01035000000002%2C%22height%22%3A42.832347999999996%2C%22text%22%3A%22SECTION%201.2%22%7D%2C%7B%22x%22%3A892.6088%2C%22y%22%3A63.641937%2C%22width%22%3A1158.9132%2C%22height%22%3A43.726967%2C%22text%22%3A%22PROGRAMS%20ARE%20TRANSLATED%20BY%20OTHER%20PROGRAMS%20INTO%20DIFFERENT%20FORMS%22%7D%2C%7B%22x%22%3A1386.9727%2C%22y%22%3A190.39626%2C%22width%22%3A177.77189999999996%2C%22height%22%3A36.399789999999996%2C%22text%22%3A%22PRINTF.O%22%7D%2C%7B%22x%22%3A397.93063%2C%22y%22%3A277.227%2C%22width%22%3A69.22526999999997%2C%22height%22%3A32.68856000000005%2C%22text%22%3A%22PRE-%22%7D%2C%7B%22x%22%3A141.94446%2C%22y%22%3A294.7586%2C%22width%22%3A155.47876000000002%2C%22height%22%3A35.450139999999976%2C%22text%22%3A%22HELLO.C%22%7D%2C%7B%22x%22%3A559.02716%2C%22y%22%3A295.5682%2C%22width%22%3A151.33014000000003%2C%22height%22%3A30.247929999999997%2C%22text%22%3A%22HELLO.I%22%7D%2C%7B%22x%22%3A1863.097%2C%22y%22%3A296.42358%2C%22width%22%3A111.7378000000001%2C%22height%22%3A29.218619999999987%2C%22text%22%3A%22HE1LO%22%7D%2C%7B%22x%22%3A976.67126%2C%22y%22%3A296.49103%2C%22width%22%3A152.32834000000014%2C%22height%22%3A30.102409999999963%2C%22text%22%3A%22HELLO.S%22%7D%2C%7B%22x%22%3A1408.2023%2C%22y%22%3A296.69882%2C%22width%22%3A154.47250000000008%2C%22height%22%3A29.544179999999983%2C%22text%22%3A%22HELLO.0%22%7D%2C%7B%22x%22%3A770.8083%2C%22y%22%3A298.17972%2C%22width%22%3A151.56346999999994%2C%22height%22%3A34.14698000000004%2C%22text%22%3A%22COMPILER%22%7D%2C%7B%22x%22%3A1175.2085%2C%22y%22%3A298.71143%2C%22width%22%3A180.62239999999997%2C%22height%22%3A33.121519999999975%2C%22text%22%3A%22ASSEMBLER%22%7D%2C%7B%22x%22%3A1651.92%2C%22y%22%3A298.9951%2C%22width%22%3A108.52710000000002%2C%22height%22%3A35.17125000000004%2C%22text%22%3A%22LINKER%22%7D%2C%7B%22x%22%3A352.06543%2C%22y%22%3A324.70587%2C%22width%22%3A166.20847000000003%2C%22height%22%3A28.681579999999997%2C%22text%22%3A%22PROCESSOR%22%7D%2C%7B%22x%22%3A1227.3076%2C%22y%22%3A342.93726%2C%22width%22%3A73.23399999999992%2C%22height%22%3A30.855680000000007%2C%22text%22%3A%22(AS)%22%7D%2C%7B%22x%22%3A798.4391%2C%22y%22%3A343.31528%2C%22width%22%3A98.19759999999997%2C%22height%22%3A33.42599000000001%2C%22text%22%3A%22(CC1)%22%7D%2C%7B%22x%22%3A1668.0201%2C%22y%22%3A344.18954%2C%22width%22%3A74.82560000000012%2C%22height%22%3A32.78051999999997%2C%22text%22%3A%22(1D)%22%7D%2C%7B%22x%22%3A392.70074%2C%22y%22%3A366.48062%2C%22width%22%3A89.65296000000001%2C%22height%22%3A33.06143000000003%2C%22text%22%3A%22(CPP)%22%7D%2C%7B%22x%22%3A968.59344%2C%22y%22%3A384.772%2C%22width%22%3A165.01236000000006%2C%22height%22%3A38.56909999999999%2C%22text%22%3A%22ASSEMBLY%22%7D%2C%7B%22x%22%3A162.10965%2C%22y%22%3A385.28076%2C%22width%22%3A121.44968%2C%22height%22%3A33.330960000000005%2C%22text%22%3A%22SOURCE%22%7D%2C%7B%22x%22%3A564.7175%2C%22y%22%3A386.51358%2C%22width%22%3A143.98293999999999%2C%22height%22%3A30.932770000000005%2C%22text%22%3A%22MODIFIED%22%7D%2C%7B%22x%22%3A1387.3433%2C%22y%22%3A386.38702%2C%22width%22%3A204.14229999999998%2C%22height%22%3A32.32682%2C%22text%22%3A%22RELOCATABLE%22%7D%2C%7B%22x%22%3A1825.4648%2C%22y%22%3A386.88754%2C%22width%22%3A192.10950000000003%2C%22height%22%3A30.36124000000001%2C%22text%22%3A%22EXECUTABLE%22%7D%2C%7B%22x%22%3A150.99731%2C%22y%22%3A428.6814%2C%22width%22%3A142.96006000000003%2C%22height%22%3A34.948199999999986%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1438.1638%2C%22y%22%3A429.70352%2C%22width%22%3A104.26829999999995%2C%22height%22%3A31.42157999999995%2C%22text%22%3A%22OBJECT%22%7D%2C%7B%22x%22%3A1871.4448%2C%22y%22%3A432.44623%2C%22width%22%3A100.18849999999998%2C%22height%22%3A28.790039999999976%2C%22text%22%3A%22OBJECT%22%7D%2C%7B%22x%22%3A980.33777%2C%22y%22%3A434.03723%2C%22width%22%3A142.43602999999996%2C%22height%22%3A33.857169999999996%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A579.5159%2C%22y%22%3A434.96143%2C%22width%22%3A112.87729999999999%2C%22height%22%3A25.171569999999974%2C%22text%22%3A%22SOURCE%22%7D%2C%7B%22x%22%3A181.19305%2C%22y%22%3A470.6873%2C%22width%22%3A83.33817000000002%2C%22height%22%3A36.61867000000001%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A1005.59753%2C%22y%22%3A471.51205%2C%22width%22%3A90.76036999999997%2C%22height%22%3A40.89635000000004%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A565.64233%2C%22y%22%3A476.2772%2C%22width%22%3A141.40430000000003%2C%22height%22%3A29.579430000000002%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1849.3352%2C%22y%22%3A475.19217%2C%22width%22%3A143.55549999999994%2C%22height%22%3A31.218780000000038%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1408.8455%2C%22y%22%3A476.85565%2C%22width%22%3A162.82150000000001%2C%22height%22%3A30.795019999999965%2C%22text%22%3A%22PROGRAMS%22%7D%2C%7B%22x%22%3A595.56714%2C%22y%22%3A516.6538%2C%22width%22%3A83.78085999999996%2C%22height%22%3A35.46799999999996%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A1855.6577%2C%22y%22%3A517.08905%2C%22width%22%3A129.92599999999993%2C%22height%22%3A37.38959%2C%22text%22%3A%22(BINARY)%22%7D%2C%7B%22x%22%3A1427.5088%2C%22y%22%3A517.52313%2C%22width%22%3A128.93259999999987%2C%22height%22%3A34.901610000000005%2C%22text%22%3A%22(BINARY)%22%7D%2C%7B%22x%22%3A110.111084%2C%22y%22%3A595.859%2C%22width%22%3A731.554116%2C%22height%22%3A47.29549999999995%2C%22text%22%3A%22FIGURE%201.3%20THE%20COMPILATION%20SYSTEM.%22%7D%2C%7B%22x%22%3A108.86451%2C%22y%22%3A756.8415%2C%22width%22%3A644.40909%2C%22height%22%3A44.820550000000026%2C%22text%22%3A%22LINUX%3E%20GCC%20-O%20HELLO%20HELLO.C%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22u2337d479%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ude92f498" id="ude92f498"><span data-lake-id="u74a49ef3" id="u74a49ef3">Here, the gcc compiler driver reads the source ﬁle </span><code data-lake-id="u64ea630d" id="u64ea630d"><span data-lake-id="ub694efd9" id="ub694efd9">hello.c</span></code><span data-lake-id="u91004053" id="u91004053"> and translates it into an executable object ﬁle </span><code data-lake-id="u4fd1b2bf" id="u4fd1b2bf"><span data-lake-id="u16bb4eb4" id="u16bb4eb4">hello</span></code><span data-lake-id="u4604455c" id="u4604455c">. The translation is performed in the sequence of four phases shown in Figure 1.3. The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known </span><span data-lake-id="u47096eba" id="u47096eba" style="color: #E8323C">collectively</span><span data-lake-id="u21c5a06a" id="u21c5a06a">  as the compilation system.</span></p><ul list="ua0f92e18"><li fid="u8a6943e7" data-lake-id="u66a50d9d" id="u66a50d9d"><span data-lake-id="u06532a29" id="u06532a29">Preprocessing phase. The preprocessor (cpp) modiﬁes the original C program according to directives </span><u><span data-lake-id="u47445cec" id="u47445cec">that</span></u><span data-lake-id="uc3cd5c49" id="uc3cd5c49"> begin with the </span><code data-lake-id="u62cab8cd" id="u62cab8cd"><span data-lake-id="u50befd68" id="u50befd68">‘#’</span></code><span data-lake-id="u32268e60" id="u32268e60"> character. For example, the </span><code data-lake-id="u183c50d0" id="u183c50d0"><span data-lake-id="ub51964c1" id="ub51964c1">#include &lt;stdio.h&gt;</span></code><span data-lake-id="u21b730be" id="u21b730be"> command in line 1 of </span><code data-lake-id="u73941fe4" id="u73941fe4"><span data-lake-id="u92c359a1" id="u92c359a1">hello.c</span></code><span data-lake-id="u91294678" id="u91294678"> tells the preprocessor to read the contents of the system header ﬁle </span><code data-lake-id="u2a52419f" id="u2a52419f"><span data-lake-id="u9bba9d0d" id="u9bba9d0d">stdio.h</span></code><span data-lake-id="u0cb79fab" id="u0cb79fab"> and insert it directly into the program text. The result is another C program, typically with the </span><code data-lake-id="ube146195" id="ube146195"><span data-lake-id="u9e56ce02" id="u9e56ce02">.i</span></code><span data-lake-id="u37fcf46e" id="u37fcf46e"> sufﬁx.</span></li><li fid="u8a6943e7" data-lake-id="u9979dc30" id="u9979dc30"><span data-lake-id="u8c214220" id="u8c214220" style="color: #E8323C">Compilation</span><span data-lake-id="u6067c623" id="u6067c623"> phase. The compiler (cc1) translates the text ﬁle </span><code data-lake-id="u194c60c7" id="u194c60c7"><span data-lake-id="u9fb13610" id="u9fb13610">hello.i</span></code><span data-lake-id="u71227094" id="u71227094"> into the text ﬁle hello.s, which contains an assembly-language program. This program includes the following deﬁnition of function main:</span></li></ul><p data-lake-id="u611e3647" id="u611e3647" style="text-align: left"><span data-lake-id="ua943549b" id="ua943549b">      </span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F687303%2F1668473023883-ca1d2b75-7b3b-45c2-aca5-b8c78c287524.png%22%2C%22taskId%22%3A%22u00b37ebe-ca07-4fbb-9857-8220bb88af5%22%2C%22clientId%22%3A%22u6bb6df7b-79bb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A238.66666666666666%2C%22height%22%3A141%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A48400%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A716%2C%22originHeight%22%3A424%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MAIN%3A%20%248%2C%20%25RSP%202%20SUBG%20%24.LCO%2C%20%25EDI%20345%20MOVI%20CALL%20PUTS%20%240%2C%20%25EAX%20MOVL%20%248%2C%20%25RSP%20ADDQ%207%20RET%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A127.77262%2C%22y%22%3A28.967493%2C%22width%22%3A114.22848%2C%22height%22%3A30.873617%2C%22text%22%3A%22MAIN%3A%22%7D%2C%7B%22x%22%3A366.21664%2C%22y%22%3A77.671165%2C%22width%22%3A190.50211000000002%2C%22height%22%3A46.303465%2C%22text%22%3A%22%248%2C%20%25RSP%22%7D%2C%7B%22x%22%3A32.790806%2C%22y%22%3A86.228615%2C%22width%22%3A26.446377%2C%22height%22%3A31.907534999999996%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A177.71126%2C%22y%22%3A86.49523%2C%22width%22%3A93.98053999999999%2C%22height%22%3A35.57015%2C%22text%22%3A%22SUBG%22%7D%2C%7B%22x%22%3A364.12378%2C%22y%22%3A136.92036%2C%22width%22%3A262.56048999999996%2C%22height%22%3A43.65900000000002%2C%22text%22%3A%22%24.LCO%2C%20%25EDI%22%7D%2C%7B%22x%22%3A32.573116%2C%22y%22%3A143.11548%2C%22width%22%3A26.40522%2C%22height%22%3A145.72852%2C%22text%22%3A%22345%22%7D%2C%7B%22x%22%3A173.72722%2C%22y%22%3A144.20459%2C%22width%22%3A96.00968%2C%22height%22%3A31.292040000000014%2C%22text%22%3A%22MOVI%22%7D%2C%7B%22x%22%3A176.92058%2C%22y%22%3A196.72319%2C%22width%22%3A93.83479000000003%2C%22height%22%3A33.725420000000014%2C%22text%22%3A%22CALL%22%7D%2C%7B%22x%22%3A359.21097%2C%22y%22%3A198.23427%2C%22width%22%3A101.72723000000002%2C%22height%22%3A40.2269%2C%22text%22%3A%22PUTS%22%7D%2C%7B%22x%22%3A366.97195%2C%22y%22%3A248.49022%2C%22width%22%3A189.88715000000002%2C%22height%22%3A41.02189999999999%2C%22text%22%3A%22%240%2C%20%25EAX%22%7D%2C%7B%22x%22%3A173.96356%2C%22y%22%3A256.95407%2C%22width%22%3A96.61837999999997%2C%22height%22%3A30.38409999999999%2C%22text%22%3A%22MOVL%22%7D%2C%7B%22x%22%3A366.30777%2C%22y%22%3A305.0668%2C%22width%22%3A190.59682999999995%2C%22height%22%3A48.027300000000025%2C%22text%22%3A%22%248%2C%20%25RSP%22%7D%2C%7B%22x%22%3A177.72778%2C%22y%22%3A310.41504%2C%22width%22%3A97.21325999999999%2C%22height%22%3A41.62536%2C%22text%22%3A%22ADDQ%22%7D%2C%7B%22x%22%3A33.679806%2C%22y%22%3A366.45926%2C%22width%22%3A24.086292%2C%22height%22%3A35.68114000000003%2C%22text%22%3A%227%22%7D%2C%7B%22x%22%3A176.57622%2C%22y%22%3A371.61868%2C%22width%22%3A69.8013%2C%22height%22%3A27.77460000000002%2C%22text%22%3A%22RET%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22u9aa8485a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uc5005d4a" id="uc5005d4a" style="text-align: left"><span data-lake-id="u55f4ed65" id="u55f4ed65">       Each of lines 2–7 in this deﬁnition describes one low-level machine-language instruction in a textual form. Assembly language is useful </span><u><span data-lake-id="ua17a9489" id="ua17a9489">because</span></u><span data-lake-id="u8c6c82a1" id="u8c6c82a1">  it provides a common output language  </span><u><span data-lake-id="u7090fde4" id="u7090fde4">for</span></u><span data-lake-id="u5aa2850f" id="u5aa2850f">  different compilers </span><u><span data-lake-id="u688b2823" id="u688b2823"> for</span></u><span data-lake-id="u5a24dd91" id="u5a24dd91"> different high-level languages.  For example, C compilers and Fortran compilers both generate output ﬁles in the same assembly language.</span></p><ul list="u31d0d4c9"><li fid="ucfe06c16" data-lake-id="uc96eebf7" id="uc96eebf7" style="text-align: left"><span data-lake-id="u53732538" id="u53732538">Assembly phase. Next, </span><code data-lake-id="ud0bc1eb1" id="ud0bc1eb1"><span data-lake-id="ue7e55dc9" id="ue7e55dc9">the assembler </span><sup><span data-lake-id="u4b4bea68" id="u4b4bea68">S</span></sup></code><span data-lake-id="u1ff56276" id="u1ff56276">  </span><span data-lake-id="u50ec58f8" id="u50ec58f8" style="background-color: #BA9BF2"> (as)</span><span data-lake-id="uc9f8e1f6" id="uc9f8e1f6">   </span><span data-lake-id="ue4373fc8" id="ue4373fc8" style="color: #E8323C">translates </span><sup><span data-lake-id="ub8a18fca" id="ub8a18fca" style="color: #E8323C">v</span></sup><span data-lake-id="uf205f8a7" id="uf205f8a7"> </span><code data-lake-id="u61aaf39c" id="u61aaf39c"><span data-lake-id="u91c18a26" id="u91c18a26">hello.s</span></code><span data-lake-id="u020b765f" id="u020b765f"> into machine-language instructions,  </span><span data-lake-id="u6632b5a0" id="u6632b5a0" style="color: #E8323C">packages </span><sup><span data-lake-id="udc3f951a" id="udc3f951a" style="color: #E8323C">v</span></sup><span data-lake-id="u90d7b4c3" id="u90d7b4c3"> them in a form known as </span><u><span data-lake-id="ub5c11c3f" id="ub5c11c3f">a relocatable object program 可重定位的目标程序,</span></u><span data-lake-id="u0f49a9f9" id="u0f49a9f9"> and stores the result in the object ﬁle </span><code data-lake-id="ua8d146f7" id="ua8d146f7"><span data-lake-id="u644228eb" id="u644228eb">hello.o</span></code><span data-lake-id="ubb2f55bf" id="ubb2f55bf">.  This ﬁle is a binary ﬁle （containing 17 bytes） </span><span data-lake-id="uf282c289" id="uf282c289" style="color: #E8323C">to encode </span><sup><span data-lake-id="u9efbcfe3" id="u9efbcfe3" style="color: #E8323C">动词不定时？</span></sup><span data-lake-id="uc1dd6fcc" id="uc1dd6fcc"> the instructions for function main.  If we were to view hello.o with a text editor, it would appear to be gibberish.</span></li></ul><p data-lake-id="uec93bc1f" id="uec93bc1f"><br></p><p data-lake-id="u321f9c1c" id="u321f9c1c"><br></p>',body_draft_lake:'<!doctype lake><meta name="doc-version" content="1" /><meta name="typography" content="classic" /><meta name="viewport" content="fixed" /><meta name="paragraphSpacing" content="relax" /><p data-lake-id="ucdace451" id="ucdace451"><span data-lake-id="u9ace02c0" id="u9ace02c0">The hello program begins life as a high-level C program </span><u><span data-lake-id="u81a9f2a3" id="u81a9f2a3">because</span></u><span data-lake-id="u89c376b2" id="u89c376b2"> it can be read and understood by human beings in that form. However, in order to run </span><code data-lake-id="u28576b3e" id="u28576b3e"><span data-lake-id="u4e6b4e07" id="u4e6b4e07">hello.c</span></code><span data-lake-id="u5535c4ff" id="u5535c4ff"> on the system, the </span><span data-lake-id="ub1d28279" id="ub1d28279" style="color: #E8323C">individual</span><sup><span data-lake-id="u151e7927" id="u151e7927" style="color: #E8323C">单独的</span></sup><span data-lake-id="ub73bedeb" id="ub73bedeb"> C statements must be translated by other programs into a sequence of low-level machine-language instructions. </span></p><p data-lake-id="u1816b331" id="u1816b331"><span data-lake-id="u2ad42801" id="u2ad42801">​</span><br></p><p data-lake-id="u84ac3ad7" id="u84ac3ad7"><span data-lake-id="u1bedcbc7" id="u1bedcbc7">These instructions are then packaged in a form </span><u><span data-lake-id="u46545da4" id="u46545da4">called</span></u><span data-lake-id="uc37ed434" id="uc37ed434"> an executable object program and stored as a binary disk ﬁle. </span></p><p data-lake-id="u90f6a1e0" id="u90f6a1e0"><span data-lake-id="ud27a8494" id="ud27a8494">​</span><br></p><p data-lake-id="u8b90bc08" id="u8b90bc08"><span data-lake-id="u95d447a7" id="u95d447a7">Object programs </span><u><span data-lake-id="u32f77516" id="u32f77516">are also referred to as </span></u><u><sup><span data-lake-id="u6d7e7d49" id="u6d7e7d49">也称为</span></sup></u><span data-lake-id="ub328dabb" id="ub328dabb"> executable object ﬁles.</span></p><p data-lake-id="u704a7308" id="u704a7308"><span data-lake-id="u6dfabcee" id="u6dfabcee">​</span><br></p><p data-lake-id="u346670aa" id="u346670aa"><span data-lake-id="u3a85462c" id="u3a85462c">On a Unix system, the translation from source ﬁle to object ﬁle is performed by a compiler driver:</span></p><p data-lake-id="ue9619857" id="ue9619857"><span data-lake-id="ua11c2160" id="ua11c2160">​</span><br></p><p data-lake-id="uaf9afed8" id="uaf9afed8"><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F687303%2F1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png%22%2C%22taskId%22%3A%22u4c194054-430a-42f4-8c78-b67e96dcfb9%22%2C%22clientId%22%3A%22u6bb6df7b-79bb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A696%2C%22height%22%3A275%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A149716%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A2088%2C%22originHeight%22%3A824%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22SECTION%201.2%20PROGRAMS%20ARE%20TRANSLATED%20BY%20OTHER%20PROGRAMS%20INTO%20DIFFERENT%20FORMS%20PRINTF.O%20PRE-%20HELLO.C%20HELLO.I%20HE1LO%20HELLO.S%20HELLO.0%20COMPILER%20ASSEMBLER%20LINKER%20PROCESSOR%20(AS)%20(CC1)%20(1D)%20(CPP)%20ASSEMBLY%20SOURCE%20MODIFIED%20RELOCATABLE%20EXECUTABLE%20PROGRAM%20OBJECT%20OBJECT%20PROGRAM%20SOURCE%20(TEXT)%20(TEXT)%20PROGRAM%20PROGRAM%20PROGRAMS%20(TEXT)%20(BINARY)%20(BINARY)%20FIGURE%201.3%20THE%20COMPILATION%20SYSTEM.%20LINUX%3E%20GCC%20-O%20HELLO%20HELLO.C%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A656.05695%2C%22y%22%3A60.696392%2C%22width%22%3A205.01035000000002%2C%22height%22%3A42.832347999999996%2C%22text%22%3A%22SECTION%201.2%22%7D%2C%7B%22x%22%3A892.6088%2C%22y%22%3A63.641937%2C%22width%22%3A1158.9132%2C%22height%22%3A43.726967%2C%22text%22%3A%22PROGRAMS%20ARE%20TRANSLATED%20BY%20OTHER%20PROGRAMS%20INTO%20DIFFERENT%20FORMS%22%7D%2C%7B%22x%22%3A1386.9727%2C%22y%22%3A190.39626%2C%22width%22%3A177.77189999999996%2C%22height%22%3A36.399789999999996%2C%22text%22%3A%22PRINTF.O%22%7D%2C%7B%22x%22%3A397.93063%2C%22y%22%3A277.227%2C%22width%22%3A69.22526999999997%2C%22height%22%3A32.68856000000005%2C%22text%22%3A%22PRE-%22%7D%2C%7B%22x%22%3A141.94446%2C%22y%22%3A294.7586%2C%22width%22%3A155.47876000000002%2C%22height%22%3A35.450139999999976%2C%22text%22%3A%22HELLO.C%22%7D%2C%7B%22x%22%3A559.02716%2C%22y%22%3A295.5682%2C%22width%22%3A151.33014000000003%2C%22height%22%3A30.247929999999997%2C%22text%22%3A%22HELLO.I%22%7D%2C%7B%22x%22%3A1863.097%2C%22y%22%3A296.42358%2C%22width%22%3A111.7378000000001%2C%22height%22%3A29.218619999999987%2C%22text%22%3A%22HE1LO%22%7D%2C%7B%22x%22%3A976.67126%2C%22y%22%3A296.49103%2C%22width%22%3A152.32834000000014%2C%22height%22%3A30.102409999999963%2C%22text%22%3A%22HELLO.S%22%7D%2C%7B%22x%22%3A1408.2023%2C%22y%22%3A296.69882%2C%22width%22%3A154.47250000000008%2C%22height%22%3A29.544179999999983%2C%22text%22%3A%22HELLO.0%22%7D%2C%7B%22x%22%3A770.8083%2C%22y%22%3A298.17972%2C%22width%22%3A151.56346999999994%2C%22height%22%3A34.14698000000004%2C%22text%22%3A%22COMPILER%22%7D%2C%7B%22x%22%3A1175.2085%2C%22y%22%3A298.71143%2C%22width%22%3A180.62239999999997%2C%22height%22%3A33.121519999999975%2C%22text%22%3A%22ASSEMBLER%22%7D%2C%7B%22x%22%3A1651.92%2C%22y%22%3A298.9951%2C%22width%22%3A108.52710000000002%2C%22height%22%3A35.17125000000004%2C%22text%22%3A%22LINKER%22%7D%2C%7B%22x%22%3A352.06543%2C%22y%22%3A324.70587%2C%22width%22%3A166.20847000000003%2C%22height%22%3A28.681579999999997%2C%22text%22%3A%22PROCESSOR%22%7D%2C%7B%22x%22%3A1227.3076%2C%22y%22%3A342.93726%2C%22width%22%3A73.23399999999992%2C%22height%22%3A30.855680000000007%2C%22text%22%3A%22(AS)%22%7D%2C%7B%22x%22%3A798.4391%2C%22y%22%3A343.31528%2C%22width%22%3A98.19759999999997%2C%22height%22%3A33.42599000000001%2C%22text%22%3A%22(CC1)%22%7D%2C%7B%22x%22%3A1668.0201%2C%22y%22%3A344.18954%2C%22width%22%3A74.82560000000012%2C%22height%22%3A32.78051999999997%2C%22text%22%3A%22(1D)%22%7D%2C%7B%22x%22%3A392.70074%2C%22y%22%3A366.48062%2C%22width%22%3A89.65296000000001%2C%22height%22%3A33.06143000000003%2C%22text%22%3A%22(CPP)%22%7D%2C%7B%22x%22%3A968.59344%2C%22y%22%3A384.772%2C%22width%22%3A165.01236000000006%2C%22height%22%3A38.56909999999999%2C%22text%22%3A%22ASSEMBLY%22%7D%2C%7B%22x%22%3A162.10965%2C%22y%22%3A385.28076%2C%22width%22%3A121.44968%2C%22height%22%3A33.330960000000005%2C%22text%22%3A%22SOURCE%22%7D%2C%7B%22x%22%3A564.7175%2C%22y%22%3A386.51358%2C%22width%22%3A143.98293999999999%2C%22height%22%3A30.932770000000005%2C%22text%22%3A%22MODIFIED%22%7D%2C%7B%22x%22%3A1387.3433%2C%22y%22%3A386.38702%2C%22width%22%3A204.14229999999998%2C%22height%22%3A32.32682%2C%22text%22%3A%22RELOCATABLE%22%7D%2C%7B%22x%22%3A1825.4648%2C%22y%22%3A386.88754%2C%22width%22%3A192.10950000000003%2C%22height%22%3A30.36124000000001%2C%22text%22%3A%22EXECUTABLE%22%7D%2C%7B%22x%22%3A150.99731%2C%22y%22%3A428.6814%2C%22width%22%3A142.96006000000003%2C%22height%22%3A34.948199999999986%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1438.1638%2C%22y%22%3A429.70352%2C%22width%22%3A104.26829999999995%2C%22height%22%3A31.42157999999995%2C%22text%22%3A%22OBJECT%22%7D%2C%7B%22x%22%3A1871.4448%2C%22y%22%3A432.44623%2C%22width%22%3A100.18849999999998%2C%22height%22%3A28.790039999999976%2C%22text%22%3A%22OBJECT%22%7D%2C%7B%22x%22%3A980.33777%2C%22y%22%3A434.03723%2C%22width%22%3A142.43602999999996%2C%22height%22%3A33.857169999999996%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A579.5159%2C%22y%22%3A434.96143%2C%22width%22%3A112.87729999999999%2C%22height%22%3A25.171569999999974%2C%22text%22%3A%22SOURCE%22%7D%2C%7B%22x%22%3A181.19305%2C%22y%22%3A470.6873%2C%22width%22%3A83.33817000000002%2C%22height%22%3A36.61867000000001%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A1005.59753%2C%22y%22%3A471.51205%2C%22width%22%3A90.76036999999997%2C%22height%22%3A40.89635000000004%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A565.64233%2C%22y%22%3A476.2772%2C%22width%22%3A141.40430000000003%2C%22height%22%3A29.579430000000002%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1849.3352%2C%22y%22%3A475.19217%2C%22width%22%3A143.55549999999994%2C%22height%22%3A31.218780000000038%2C%22text%22%3A%22PROGRAM%22%7D%2C%7B%22x%22%3A1408.8455%2C%22y%22%3A476.85565%2C%22width%22%3A162.82150000000001%2C%22height%22%3A30.795019999999965%2C%22text%22%3A%22PROGRAMS%22%7D%2C%7B%22x%22%3A595.56714%2C%22y%22%3A516.6538%2C%22width%22%3A83.78085999999996%2C%22height%22%3A35.46799999999996%2C%22text%22%3A%22(TEXT)%22%7D%2C%7B%22x%22%3A1855.6577%2C%22y%22%3A517.08905%2C%22width%22%3A129.92599999999993%2C%22height%22%3A37.38959%2C%22text%22%3A%22(BINARY)%22%7D%2C%7B%22x%22%3A1427.5088%2C%22y%22%3A517.52313%2C%22width%22%3A128.93259999999987%2C%22height%22%3A34.901610000000005%2C%22text%22%3A%22(BINARY)%22%7D%2C%7B%22x%22%3A110.111084%2C%22y%22%3A595.859%2C%22width%22%3A731.554116%2C%22height%22%3A47.29549999999995%2C%22text%22%3A%22FIGURE%201.3%20THE%20COMPILATION%20SYSTEM.%22%7D%2C%7B%22x%22%3A108.86451%2C%22y%22%3A756.8415%2C%22width%22%3A644.40909%2C%22height%22%3A44.820550000000026%2C%22text%22%3A%22LINUX%3E%20GCC%20-O%20HELLO%20HELLO.C%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22u2337d479%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="ude92f498" id="ude92f498"><span data-lake-id="u74a49ef3" id="u74a49ef3">Here, the gcc compiler driver reads the source ﬁle </span><code data-lake-id="u64ea630d" id="u64ea630d"><span data-lake-id="ub694efd9" id="ub694efd9">hello.c</span></code><span data-lake-id="u91004053" id="u91004053"> and translates it into an executable object ﬁle </span><code data-lake-id="u4fd1b2bf" id="u4fd1b2bf"><span data-lake-id="u16bb4eb4" id="u16bb4eb4">hello</span></code><span data-lake-id="u4604455c" id="u4604455c">. The translation is performed in the sequence of four phases shown in Figure 1.3. The programs that perform the four phases (preprocessor, compiler, assembler, and linker) are known </span><span data-lake-id="u47096eba" id="u47096eba" style="color: #E8323C">collectively</span><span data-lake-id="u21c5a06a" id="u21c5a06a">  as the compilation system.</span></p><ul list="ua0f92e18"><li fid="u8a6943e7" data-lake-id="u66a50d9d" id="u66a50d9d"><span data-lake-id="u06532a29" id="u06532a29">Preprocessing phase. The preprocessor (cpp) modiﬁes the original C program according to directives </span><u><span data-lake-id="u47445cec" id="u47445cec">that</span></u><span data-lake-id="uc3cd5c49" id="uc3cd5c49"> begin with the </span><code data-lake-id="u62cab8cd" id="u62cab8cd"><span data-lake-id="u50befd68" id="u50befd68">‘#’</span></code><span data-lake-id="u32268e60" id="u32268e60"> character. For example, the </span><code data-lake-id="u183c50d0" id="u183c50d0"><span data-lake-id="ub51964c1" id="ub51964c1">#include &lt;stdio.h&gt;</span></code><span data-lake-id="u21b730be" id="u21b730be"> command in line 1 of </span><code data-lake-id="u73941fe4" id="u73941fe4"><span data-lake-id="u92c359a1" id="u92c359a1">hello.c</span></code><span data-lake-id="u91294678" id="u91294678"> tells the preprocessor to read the contents of the system header ﬁle </span><code data-lake-id="u2a52419f" id="u2a52419f"><span data-lake-id="u9bba9d0d" id="u9bba9d0d">stdio.h</span></code><span data-lake-id="u0cb79fab" id="u0cb79fab"> and insert it directly into the program text. The result is another C program, typically with the </span><code data-lake-id="ube146195" id="ube146195"><span data-lake-id="u9e56ce02" id="u9e56ce02">.i</span></code><span data-lake-id="u37fcf46e" id="u37fcf46e"> sufﬁx.</span></li><li fid="u8a6943e7" data-lake-id="u9979dc30" id="u9979dc30"><span data-lake-id="u8c214220" id="u8c214220" style="color: #E8323C">Compilation</span><span data-lake-id="u6067c623" id="u6067c623"> phase. The compiler (cc1) translates the text ﬁle </span><code data-lake-id="u194c60c7" id="u194c60c7"><span data-lake-id="u9fb13610" id="u9fb13610">hello.i</span></code><span data-lake-id="u71227094" id="u71227094"> into the text ﬁle hello.s, which contains an assembly-language program. This program includes the following deﬁnition of function main:</span></li></ul><p data-lake-id="u611e3647" id="u611e3647" style="text-align: left"><span data-lake-id="ua943549b" id="ua943549b">      </span><card type="inline" name="image" value="data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F687303%2F1668473023883-ca1d2b75-7b3b-45c2-aca5-b8c78c287524.png%22%2C%22taskId%22%3A%22u00b37ebe-ca07-4fbb-9857-8220bb88af5%22%2C%22clientId%22%3A%22u6bb6df7b-79bb-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A238.66666666666666%2C%22height%22%3A141%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A48400%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A716%2C%22originHeight%22%3A424%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MAIN%3A%20%248%2C%20%25RSP%202%20SUBG%20%24.LCO%2C%20%25EDI%20345%20MOVI%20CALL%20PUTS%20%240%2C%20%25EAX%20MOVL%20%248%2C%20%25RSP%20ADDQ%207%20RET%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A127.77262%2C%22y%22%3A28.967493%2C%22width%22%3A114.22848%2C%22height%22%3A30.873617%2C%22text%22%3A%22MAIN%3A%22%7D%2C%7B%22x%22%3A366.21664%2C%22y%22%3A77.671165%2C%22width%22%3A190.50211000000002%2C%22height%22%3A46.303465%2C%22text%22%3A%22%248%2C%20%25RSP%22%7D%2C%7B%22x%22%3A32.790806%2C%22y%22%3A86.228615%2C%22width%22%3A26.446377%2C%22height%22%3A31.907534999999996%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A177.71126%2C%22y%22%3A86.49523%2C%22width%22%3A93.98053999999999%2C%22height%22%3A35.57015%2C%22text%22%3A%22SUBG%22%7D%2C%7B%22x%22%3A364.12378%2C%22y%22%3A136.92036%2C%22width%22%3A262.56048999999996%2C%22height%22%3A43.65900000000002%2C%22text%22%3A%22%24.LCO%2C%20%25EDI%22%7D%2C%7B%22x%22%3A32.573116%2C%22y%22%3A143.11548%2C%22width%22%3A26.40522%2C%22height%22%3A145.72852%2C%22text%22%3A%22345%22%7D%2C%7B%22x%22%3A173.72722%2C%22y%22%3A144.20459%2C%22width%22%3A96.00968%2C%22height%22%3A31.292040000000014%2C%22text%22%3A%22MOVI%22%7D%2C%7B%22x%22%3A176.92058%2C%22y%22%3A196.72319%2C%22width%22%3A93.83479000000003%2C%22height%22%3A33.725420000000014%2C%22text%22%3A%22CALL%22%7D%2C%7B%22x%22%3A359.21097%2C%22y%22%3A198.23427%2C%22width%22%3A101.72723000000002%2C%22height%22%3A40.2269%2C%22text%22%3A%22PUTS%22%7D%2C%7B%22x%22%3A366.97195%2C%22y%22%3A248.49022%2C%22width%22%3A189.88715000000002%2C%22height%22%3A41.02189999999999%2C%22text%22%3A%22%240%2C%20%25EAX%22%7D%2C%7B%22x%22%3A173.96356%2C%22y%22%3A256.95407%2C%22width%22%3A96.61837999999997%2C%22height%22%3A30.38409999999999%2C%22text%22%3A%22MOVL%22%7D%2C%7B%22x%22%3A366.30777%2C%22y%22%3A305.0668%2C%22width%22%3A190.59682999999995%2C%22height%22%3A48.027300000000025%2C%22text%22%3A%22%248%2C%20%25RSP%22%7D%2C%7B%22x%22%3A177.72778%2C%22y%22%3A310.41504%2C%22width%22%3A97.21325999999999%2C%22height%22%3A41.62536%2C%22text%22%3A%22ADDQ%22%7D%2C%7B%22x%22%3A33.679806%2C%22y%22%3A366.45926%2C%22width%22%3A24.086292%2C%22height%22%3A35.68114000000003%2C%22text%22%3A%227%22%7D%2C%7B%22x%22%3A176.57622%2C%22y%22%3A371.61868%2C%22width%22%3A69.8013%2C%22height%22%3A27.77460000000002%2C%22text%22%3A%22RET%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22u9aa8485a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card></p><p data-lake-id="uc5005d4a" id="uc5005d4a" style="text-align: left"><span data-lake-id="u55f4ed65" id="u55f4ed65">       Each of lines 2–7 in this deﬁnition describes one low-level machine-language instruction in a textual form. Assembly language is useful </span><u><span data-lake-id="ua17a9489" id="ua17a9489">because</span></u><span data-lake-id="u8c6c82a1" id="u8c6c82a1">  it provides a common output language  </span><u><span data-lake-id="u7090fde4" id="u7090fde4">for</span></u><span data-lake-id="u5aa2850f" id="u5aa2850f">  different compilers </span><u><span data-lake-id="u688b2823" id="u688b2823"> for</span></u><span data-lake-id="u5a24dd91" id="u5a24dd91"> different high-level languages.  For example, C compilers and Fortran compilers both generate output ﬁles in the same assembly language.</span></p><ul list="u31d0d4c9"><li fid="ucfe06c16" data-lake-id="uc96eebf7" id="uc96eebf7" style="text-align: left"><span data-lake-id="u53732538" id="u53732538">Assembly phase. Next, </span><code data-lake-id="ud0bc1eb1" id="ud0bc1eb1"><span data-lake-id="ue7e55dc9" id="ue7e55dc9">the assembler </span><sup><span data-lake-id="u4b4bea68" id="u4b4bea68">S</span></sup></code><span data-lake-id="u1ff56276" id="u1ff56276">  </span><span data-lake-id="u50ec58f8" id="u50ec58f8" style="background-color: #BA9BF2"> (as)</span><span data-lake-id="uc9f8e1f6" id="uc9f8e1f6">   </span><span data-lake-id="ue4373fc8" id="ue4373fc8" style="color: #E8323C">translates </span><sup><span data-lake-id="ub8a18fca" id="ub8a18fca" style="color: #E8323C">v</span></sup><span data-lake-id="uf205f8a7" id="uf205f8a7"> </span><code data-lake-id="u61aaf39c" id="u61aaf39c"><span data-lake-id="u91c18a26" id="u91c18a26">hello.s</span></code><span data-lake-id="u020b765f" id="u020b765f"> into machine-language instructions,  </span><span data-lake-id="u6632b5a0" id="u6632b5a0" style="color: #E8323C">packages </span><sup><span data-lake-id="udc3f951a" id="udc3f951a" style="color: #E8323C">v</span></sup><span data-lake-id="u90d7b4c3" id="u90d7b4c3"> them in a form known as </span><u><span data-lake-id="ub5c11c3f" id="ub5c11c3f">a relocatable object program 可重定位的目标程序,</span></u><span data-lake-id="u0f49a9f9" id="u0f49a9f9"> and stores the result in the object ﬁle </span><code data-lake-id="ua8d146f7" id="ua8d146f7"><span data-lake-id="u644228eb" id="u644228eb">hello.o</span></code><span data-lake-id="ubb2f55bf" id="ubb2f55bf">.  This ﬁle is a binary ﬁle （containing 17 bytes） </span><span data-lake-id="uf282c289" id="uf282c289" style="color: #E8323C">to encode </span><sup><span data-lake-id="u9efbcfe3" id="u9efbcfe3" style="color: #E8323C">动词不定时？</span></sup><span data-lake-id="uc1dd6fcc" id="uc1dd6fcc"> the instructions for function main.  If we were to view hello.o with a text editor, it would appear to be gibberish.</span></li></ul><p data-lake-id="uec93bc1f" id="uec93bc1f"><br></p><p data-lake-id="u321f9c1c" id="u321f9c1c"><br></p>',public:1,status:1,view_status:0,read_status:1,likes_count:0,comments_count:0,content_updated_at:"2023-03-11T05:09:32.000Z",deleted_at:null,created_at:"2023-03-11T05:01:03.000Z",updated_at:"2023-03-11T05:09:32.000Z",published_at:"2023-03-11T05:09:32.000Z",first_published_at:"2023-03-11T05:01:03.046Z",word_count:407,cover:"https://cdn.nlark.com/yuque/0/2022/png/687303/1668472440052-9f45a121-db27-49bb-86e0-6b4c79179bcc.png",description:"The hello program begins life as a high-level C program because it can be read and understood by human beings in that form. However, in order to ru...",custom_description:null,hits:0,_serializer:"v2.doc_detail"},{id:117542158,slug:"fnbhwx34twlmw762",title:"Chapter 1  A Tour of Computer Systems",book_id:36687938,book:{id:36687938,type:"Book",slug:"blog",name:"liguwe.github.io",user_id:687303,description:"liguwe's blog",creator_id:687303,public:1,items_count:3,likes_count:0,watches_count:0,content_updated_at:"2023-03-11T05:09:47.842Z",updated_at:"2023-03-11T05:11:05.000Z",created_at:"2023-03-11T03:13:50.000Z",namespace:"liguwe/blog",user:{id:687303,type:"User",login:"liguwe",name:"liguwe",description:"liguwe's blog",avatar_url:"https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1576742181690-f84f2cfb-31cd-4c3b-87b1-2e055b3f06a9.jpeg",books_count:13,public_books_count:1,followers_count:1,following_count:20,created_at:"2019-12-19T07:56:58.000Z",updated_at:"2023-03-11T03:55:57.000Z",_serializer:"v2.user"},_serializer:"v2.book"},user_id:687303,creator:{id:687303,type:"User",login:"liguwe",name:"liguwe",description:"liguwe's blog",avatar_url:"https://cdn.nlark.com/yuque/0/2019/jpeg/anonymous/1576742181690-f84f2cfb-31cd-4c3b-87b1-2e055b3f06a9.jpeg",books_count:13,public_books_count:1,followers_count:1,following_count:20,created_at:"2019-12-19T07:56:58.000Z",updated_at:"2023-03-11T03:55:57.000Z",_serializer:"v2.user"},format:"lake",body:`computer system consists of hardware and systems software  that  work together to run application programs.  Speciﬁc implementations of systems change over time, but the  underlying  concepts do not.  All computer systems have similar hardware and software components that  perform similar functions. This book is written for programmers  who  want to get better at their craft 技能，手艺 by understanding how these components work and how they affect the correctness and performance of their programs.

You are poised for an exciting journey. If you dedicate yourself to learning the concepts in this book, then you will be on your way to becoming a rare “power programmer,”  enlightened by an understanding of the underlying computer system and its impact on your application programs.

You are going to learn practical skills such as how to avoid strange奇怪的，仔细看单词 numerical errors caused by \`the way\`  that computers represent numbers.  

You will learn how to optimize your C code by using clever tricks  that  exploit充分利用  the designs of modern processors and memory systems.  

You will learn how the compiler implements procedure calls and how to use this knowledge to avoid the security holes from \` buffer overﬂow vulnerabilities\` that  plague network and Internet software.  

You will learn how to recognize and avoid the nasty errors during linking （ that  confound the average普通的，不是平庸的 programmer. ）

You will learn how to write your own Unix shell, your own dynamic storage allocation package 动态存储分配包 , and even your own Web server. 

You will learn the promises and pitfalls of concurrency,  a topic of increasing importance  as  multiple processor cores are integrated onto single chips.<br />你将学习并发的陷阱和希望，这个主题随着 单个芯片上集成的多核处理器变得越来越重要。

In their classic text on the C programming language [61], Kernighan and Ritchie introduce readers to C using the hello program shown in Figure 1.1.

\`\`\`typescript
#include <stdio.h> 
int main() {

  printf("hello, world\\n");

  return 0; 
}
\`\`\`
 Although  hello is a very simple program, every major part of the system   must work in  concert 音乐会，使协调   in order （for it） to run to completion. 
> 对于这个程序，为了能完整运行，系统的每个主要组成部分，必须协调工作。


In a sense, the goal of this book is to help you understand what happens and why when you run hello on your system.

We begin our study of systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates. 

As we follow the lifetime of the program, we will brieﬂy introduce the key concepts, terminology, and components that come into play 发挥作用的组件. Later chapters will expand on these ideas.



`,body_draft:`computer system consists of hardware and systems software  that  work together to run application programs.  Speciﬁc implementations of systems change over time, but the  underlying  concepts do not.  All computer systems have similar hardware and software components that  perform similar functions. This book is written for programmers  who  want to get better at their craft 技能，手艺 by understanding how these components work and how they affect the correctness and performance of their programs.

You are poised for an exciting journey. If you dedicate yourself to learning the concepts in this book, then you will be on your way to becoming a rare “power programmer,”  enlightened by an understanding of the underlying computer system and its impact on your application programs.

You are going to learn practical skills such as how to avoid strange奇怪的，仔细看单词 numerical errors caused by \`the way\`  that computers represent numbers.  

You will learn how to optimize your C code by using clever tricks  that  exploit充分利用  the designs of modern processors and memory systems.  

You will learn how the compiler implements procedure calls and how to use this knowledge to avoid the security holes from \` buffer overﬂow vulnerabilities\` that  plague network and Internet software.  

You will learn how to recognize and avoid the nasty errors during linking （ that  confound the average普通的，不是平庸的 programmer. ）

You will learn how to write your own Unix shell, your own dynamic storage allocation package 动态存储分配包 , and even your own Web server. 

You will learn the promises and pitfalls of concurrency,  a topic of increasing importance  as  multiple processor cores are integrated onto single chips.<br />你将学习并发的陷阱和希望，这个主题随着 单个芯片上集成的多核处理器变得越来越重要。

In their classic text on the C programming language [61], Kernighan and Ritchie introduce readers to C using the hello program shown in Figure 1.1.

\`\`\`typescript
#include <stdio.h> 
int main() {

  printf("hello, world\\n");

  return 0; 
}
\`\`\`
 Although  hello is a very simple program, every major part of the system   must work in  concert 音乐会，使协调   in order （for it） to run to completion. 
> 对于这个程序，为了能完整运行，系统的每个主要组成部分，必须协调工作。


In a sense, the goal of this book is to help you understand what happens and why when you run hello on your system.

We begin our study of systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates. 

As we follow the lifetime of the program, we will brieﬂy introduce the key concepts, terminology, and components that come into play 发挥作用的组件. Later chapters will expand on these ideas.



`,body_html:`<!doctype html><div class="lake-content" typography="classic"><p id="u16d76fdc" class="ne-p"><span class="ne-text">computer system consists of hardware and systems software  </span><span class="ne-text" style="text-decoration: underline">that</span><span class="ne-text">  work together to run application programs.  Speciﬁc implementations of systems change over time, but the  </span><span class="ne-text" style="color: #DF2A3F">underlying</span><span class="ne-text">  concepts do not.  All computer systems have similar hardware and software components </span><span class="ne-text" style="text-decoration: underline">that</span><span class="ne-text">  perform similar functions. This book is written for programmers  </span><span class="ne-text" style="text-decoration: underline">who</span><span class="ne-text">  want to get better at their </span><span class="ne-text" style="color: #CA3F4F">craft </span><sup><span class="ne-text" style="color: #CA3F4F">技能，手艺</span></sup><span class="ne-text"> by understanding </span><span class="ne-text" style="text-decoration: underline">how</span><span class="ne-text"> these components work and </span><span class="ne-text" style="text-decoration: underline">how</span><span class="ne-text"> they affect the correctness and performance of their programs.</span></p><p id="uebc954d6" class="ne-p"><br></p><p id="ub0d7c930" class="ne-p"><span class="ne-text">You are poised for an exciting journey. If you </span><span class="ne-text" style="text-decoration: underline">dedicate</span><span class="ne-text"> yourself </span><span class="ne-text" style="text-decoration: underline">to</span><span class="ne-text"> learning the concepts in this book, then you will be on your way to becoming a rare “power programmer,”  enlightened by an understanding of the underlying computer system </span><span class="ne-text" style="text-decoration: underline">and</span><span class="ne-text"> its impact on your application programs.</span></p><p id="u0da0a0c9" class="ne-p"><span class="ne-text"></span></p><p id="uc5911dc8" class="ne-p"><span class="ne-text">You are going to learn practical skills </span><span class="ne-text" style="text-decoration: underline">such as</span><span class="ne-text"> how to avoid strange</span><sup><span class="ne-text">奇怪的，仔细看单词</span></sup><span class="ne-text"> numerical errors caused by </span><code class="ne-code"><span class="ne-text">the way</span></code><span class="ne-text">  </span><span class="ne-text" style="text-decoration: underline">that</span><span class="ne-text"> computers represent numbers.  </span></p><p id="u03fc805b" class="ne-p"><span class="ne-text"></span></p><p id="u8d351ac6" class="ne-p"><span class="ne-text">You will learn how to optimize your C code by using </span><span class="ne-text" style="color: #CA3F4F">clever</span><span class="ne-text"> tricks  </span><span class="ne-text" style="text-decoration: underline">that</span><span class="ne-text">  </span><span class="ne-text" style="color: #CA3F4F">exploit</span><sup><span class="ne-text" style="color: #CA3F4F">充分利用</span></sup><span class="ne-text">  the designs of modern processors and memory systems.  </span></p><p id="u735ed5b9" class="ne-p"><span class="ne-text"></span></p><p id="udf90c650" class="ne-p"><span class="ne-text">You will learn </span><span class="ne-text" style="color: #E4495B; background-color: #F3BB2F">how</span><span class="ne-text"> the compiler implements procedure calls </span><span class="ne-text" style="background-color: #F3BB2F">and how</span><span class="ne-text"> to use this knowledge to avoid the security holes from </span><code class="ne-code"><span class="ne-text"> buffer overﬂow vulnerabilities</span></code><span class="ne-text"> </span><span class="ne-text" style="background-color: #C29219">that</span><span class="ne-text">  </span><span class="ne-text" style="color: #B62536">plague</span><span class="ne-text"> network and Internet software.  </span></p><p id="u4c2bac0c" class="ne-p"><br></p><p id="ud79de948" class="ne-p"><span class="ne-text">You will learn how to recognize and avoid </span><span class="ne-text" style="text-decoration: underline">the </span><span class="ne-text" style="color: #B62536; text-decoration: underline">nasty</span><span class="ne-text" style="text-decoration: underline"> errors during linking</span><span class="ne-text"> （ </span><span class="ne-text" style="background-color: #BA9BF2">that</span><span class="ne-text">  </span><span class="ne-text" style="color: #B62536">confound</span><span class="ne-text"> the </span><span class="ne-text" style="color: #B62536">average</span><sup><span class="ne-text">普通的，不是平庸的</span></sup><span class="ne-text"> programmer. ）</span></p><p id="ub72c8021" class="ne-p"><br></p><p id="u490bf641" class="ne-p"><span class="ne-text">You will learn how to write your own Unix shell, your own </span><span class="ne-text" style="text-decoration: underline">dynamic storage </span><span class="ne-text" style="color: #B62536; text-decoration: underline">allocation</span><span class="ne-text" style="text-decoration: underline"> package </span><sup><span class="ne-text" style="text-decoration: underline">动态存储分配包 </span></sup><span class="ne-text" style="text-decoration: underline">,</span><span class="ne-text"> and even your own Web server. </span></p><p id="u7a25d41a" class="ne-p"><br></p><p id="u94bae4f4" class="ne-p"><span class="ne-text">You will learn the promises and </span><span class="ne-text" style="color: #B62536">pitfalls</span><span class="ne-text"> of </span><span class="ne-text" style="color: #B62536">concurrency</span><span class="ne-text">,  a topic of increasing importance  </span><span class="ne-text" style="background-color: #3A1C73">as</span><span class="ne-text">  multiple processor cores are integrated onto single chips.</span></p><p id="ue86491a3" class="ne-p"><span class="ne-text">你将学习并发的陷阱和希望，这个主题随着 单个芯片上集成的多核处理器变得越来越重要。</span></p><p id="u163e3c40" class="ne-p"><span class="ne-text"></span></p><p id="uc1aa1c0c" class="ne-p"><span class="ne-text">In their classic text on the C programming language [61], Kernighan and Ritchie introduce readers to C using the hello program shown in Figure 1.1.</span></p><p id="uaa71ce8e" class="ne-p"><span class="ne-text"></span></p><pre data-language="typescript" id="ruzT7" class="ne-codeblock language-typescript">#include &lt;stdio.h&gt; 
int main() {

  printf(&quot;hello, world\\n&quot;);

  return 0; 
}</pre><p id="u9e983e6c" class="ne-p"><span class="ne-text"> </span><span class="ne-text" style="background-color: #BA9BF2">Although</span><span class="ne-text">  hello is a very simple program, </span><span class="ne-text" style="text-decoration: underline">every major part of the system</span><span class="ne-text">   </span><span class="ne-text" style="text-decoration: underline">must work in  </span><span class="ne-text" style="color: #B62536; text-decoration: underline">concert </span><sup><span class="ne-text" style="color: #B62536; text-decoration: underline">音乐会，使协调</span></sup><span class="ne-text" style="text-decoration: underline"> </span><span class="ne-text">  </span><span class="ne-text" style="text-decoration: underline">in order （for it） to run to completion</span><span class="ne-text">. </span></p><div class="ne-quote"><p id="u044649b5" class="ne-p"><span class="ne-text">对于这个程序，为了能完整运行，系统的每个主要组成部分，必须协调工作。</span></p></div><p id="u1995cf80" class="ne-p"><span class="ne-text"></span></p><p id="u65804d75" class="ne-p"><span class="ne-text">In a sense, the goal of this book is to help you understand what happens and why when you run hello on your system.</span></p><p id="uf0576d77" class="ne-p"><span class="ne-text"></span></p><p id="udcb21529" class="ne-p"><span class="ne-text">We begin our study of systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates. </span></p><p id="u7d42ef94" class="ne-p"><span class="ne-text"></span></p><p id="uc6228ad1" class="ne-p"><span class="ne-text">As we follow the lifetime of the program, we will brieﬂy introduce the key concepts, </span><span class="ne-text" style="color: #B62536">terminology</span><span class="ne-text">, and </span><span class="ne-text" style="text-decoration: underline">components that come into play </span><sup><span class="ne-text">发挥作用的组件</span></sup><span class="ne-text">. Later chapters will expand on these ideas.</span></p><p id="u8c5d8670" class="ne-p"><br></p><p id="u9ddf24d9" class="ne-p"><br></p><p id="u0d33ef91" class="ne-p"><span class="ne-text"></span></p></div>`,body_lake:'<!doctype lake><meta name="doc-version" content="1" /><meta name="typography" content="classic" /><meta name="viewport" content="fixed" /><meta name="defaultFontsize" content="16" /><meta name="paragraphSpacing" content="relax" /><p data-lake-id="u16d76fdc" id="u16d76fdc"><span data-lake-id="u9f1a886e" id="u9f1a886e">computer system consists of hardware and systems software  </span><u><span data-lake-id="u67760662" id="u67760662">that</span></u><span data-lake-id="ue0f26516" id="ue0f26516">  work together to run application programs.  Speciﬁc implementations of systems change over time, but the  </span><span data-lake-id="u07a7691b" id="u07a7691b" style="color: #DF2A3F">underlying</span><span data-lake-id="u1f385a5c" id="u1f385a5c">  concepts do not.  All computer systems have similar hardware and software components </span><u><span data-lake-id="u3a7ec8cc" id="u3a7ec8cc">that</span></u><span data-lake-id="u336a4a9c" id="u336a4a9c">  perform similar functions. This book is written for programmers  </span><u><span data-lake-id="u665da331" id="u665da331">who</span></u><span data-lake-id="u28176ac2" id="u28176ac2">  want to get better at their </span><span data-lake-id="ufbd280c4" id="ufbd280c4" style="color: #CA3F4F">craft </span><sup><span data-lake-id="u63c939e0" id="u63c939e0" style="color: #CA3F4F">技能，手艺</span></sup><span data-lake-id="u4fd95c03" id="u4fd95c03"> by understanding </span><u><span data-lake-id="u821a4682" id="u821a4682">how</span></u><span data-lake-id="ud8084549" id="ud8084549"> these components work and </span><u><span data-lake-id="u01fc4334" id="u01fc4334">how</span></u><span data-lake-id="ub0a7ea3b" id="ub0a7ea3b"> they affect the correctness and performance of their programs.</span></p><p data-lake-id="uebc954d6" id="uebc954d6"><br></p><p data-lake-id="ub0d7c930" id="ub0d7c930"><span data-lake-id="ucab391fc" id="ucab391fc">You are poised for an exciting journey. If you </span><u><span data-lake-id="u7d3cdd6a" id="u7d3cdd6a">dedicate</span></u><span data-lake-id="u54885064" id="u54885064"> yourself </span><u><span data-lake-id="uf21538e3" id="uf21538e3">to</span></u><span data-lake-id="u028ae3a4" id="u028ae3a4"> learning the concepts in this book, then you will be on your way to becoming a rare “power programmer,”  enlightened by an understanding of the underlying computer system </span><u><span data-lake-id="u746bc931" id="u746bc931">and</span></u><span data-lake-id="u0b3782c4" id="u0b3782c4"> its impact on your application programs.</span></p><p data-lake-id="u0da0a0c9" id="u0da0a0c9"><span data-lake-id="u8f34d4be" id="u8f34d4be">​</span><br></p><p data-lake-id="uc5911dc8" id="uc5911dc8"><span data-lake-id="uc9acb7f4" id="uc9acb7f4">You are going to learn practical skills </span><u><span data-lake-id="u8b1e0b2f" id="u8b1e0b2f">such as</span></u><span data-lake-id="u956d8975" id="u956d8975"> how to avoid strange</span><sup><span data-lake-id="ua07344d1" id="ua07344d1">奇怪的，仔细看单词</span></sup><span data-lake-id="ue671dc4f" id="ue671dc4f"> numerical errors caused by </span><code data-lake-id="u7f116bb2" id="u7f116bb2"><span data-lake-id="uecf57402" id="uecf57402">the way</span></code><span data-lake-id="u7eff88fc" id="u7eff88fc">  </span><u><span data-lake-id="u7547273a" id="u7547273a">that</span></u><span data-lake-id="u9ea5375d" id="u9ea5375d"> computers represent numbers.  </span></p><p data-lake-id="u03fc805b" id="u03fc805b"><span data-lake-id="uefd74e9f" id="uefd74e9f">​</span><br></p><p data-lake-id="u8d351ac6" id="u8d351ac6"><span data-lake-id="u015e83cb" id="u015e83cb">You will learn how to optimize your C code by using </span><span data-lake-id="u80e210df" id="u80e210df" style="color: #CA3F4F">clever</span><span data-lake-id="u74f2af56" id="u74f2af56"> tricks  </span><u><span data-lake-id="u5ba29b58" id="u5ba29b58">that</span></u><span data-lake-id="u471d4917" id="u471d4917">  </span><span data-lake-id="uf8a8b87e" id="uf8a8b87e" style="color: #CA3F4F">exploit</span><sup><span data-lake-id="u5b7aaaed" id="u5b7aaaed" style="color: #CA3F4F">充分利用</span></sup><span data-lake-id="u7b278c65" id="u7b278c65">  the designs of modern processors and memory systems.  </span></p><p data-lake-id="u735ed5b9" id="u735ed5b9"><span data-lake-id="ucaad5d79" id="ucaad5d79">​</span><br></p><p data-lake-id="udf90c650" id="udf90c650"><span data-lake-id="ue0f926f7" id="ue0f926f7">You will learn </span><span data-lake-id="u1a9224cc" id="u1a9224cc" style="color: #E4495B; background-color: #F3BB2F">how</span><span data-lake-id="ua44b5990" id="ua44b5990"> the compiler implements procedure calls </span><span data-lake-id="ub039a201" id="ub039a201" style="background-color: #F3BB2F">and how</span><span data-lake-id="u31387bd0" id="u31387bd0"> to use this knowledge to avoid the security holes from </span><code data-lake-id="u4b9ddd90" id="u4b9ddd90"><span data-lake-id="u4b72a343" id="u4b72a343"> buffer overﬂow vulnerabilities</span></code><span data-lake-id="u354dcc3a" id="u354dcc3a"> </span><span data-lake-id="u4429bd7f" id="u4429bd7f" style="background-color: #C29219">that</span><span data-lake-id="udf1cfd08" id="udf1cfd08">  </span><span data-lake-id="u67dc2085" id="u67dc2085" style="color: #B62536">plague</span><span data-lake-id="u996fc6fa" id="u996fc6fa"> network and Internet software.  </span></p><p data-lake-id="u4c2bac0c" id="u4c2bac0c"><br></p><p data-lake-id="ud79de948" id="ud79de948"><span data-lake-id="u6c610c54" id="u6c610c54">You will learn how to recognize and avoid </span><u><span data-lake-id="u500b57c7" id="u500b57c7">the </span></u><span style="color: #B62536"><u><span data-lake-id="uec7a8c7e" id="uec7a8c7e">nasty</span></u></span><u><span data-lake-id="u30eda136" id="u30eda136"> errors during linking</span></u><span data-lake-id="ud1457cdd" id="ud1457cdd"> （ </span><span data-lake-id="uf994bb5b" id="uf994bb5b" style="background-color: #BA9BF2">that</span><span data-lake-id="u6db8f52e" id="u6db8f52e">  </span><span data-lake-id="udbfcfc8a" id="udbfcfc8a" style="color: #B62536">confound</span><span data-lake-id="ua1f3f3ea" id="ua1f3f3ea"> the </span><span data-lake-id="ud404ccaa" id="ud404ccaa" style="color: #B62536">average</span><sup><span data-lake-id="uadb23a0c" id="uadb23a0c">普通的，不是平庸的</span></sup><span data-lake-id="ueae1ff5a" id="ueae1ff5a"> programmer. ）</span></p><p data-lake-id="ub72c8021" id="ub72c8021"><br></p><p data-lake-id="u490bf641" id="u490bf641"><span data-lake-id="u5ef58ed4" id="u5ef58ed4">You will learn how to write your own Unix shell, your own </span><u><span data-lake-id="u292aab3e" id="u292aab3e">dynamic storage </span></u><span style="color: #B62536"><u><span data-lake-id="u01d54b53" id="u01d54b53">allocation</span></u></span><u><span data-lake-id="uaefd5ec7" id="uaefd5ec7"> package </span></u><u><sup><span data-lake-id="u8035409f" id="u8035409f">动态存储分配包 </span></sup></u><u><span data-lake-id="u6e42c5b6" id="u6e42c5b6">,</span></u><span data-lake-id="ub7fb15a8" id="ub7fb15a8"> and even your own Web server. </span></p><p data-lake-id="u7a25d41a" id="u7a25d41a"><br></p><p data-lake-id="u94bae4f4" id="u94bae4f4"><span data-lake-id="u39f679c9" id="u39f679c9">You will learn the promises and </span><span data-lake-id="u21905891" id="u21905891" style="color: #B62536">pitfalls</span><span data-lake-id="u8f259c4b" id="u8f259c4b"> of </span><span data-lake-id="u5002ee6b" id="u5002ee6b" style="color: #B62536">concurrency</span><span data-lake-id="ue6fc45d7" id="ue6fc45d7">,  a topic of increasing importance  </span><span data-lake-id="u5429e290" id="u5429e290" style="background-color: #3A1C73">as</span><span data-lake-id="uec9e5522" id="uec9e5522">  multiple processor cores are integrated onto single chips.</span></p><p data-lake-id="ue86491a3" id="ue86491a3"><span data-lake-id="u45e05e49" id="u45e05e49">你将学习并发的陷阱和希望，这个主题随着 单个芯片上集成的多核处理器变得越来越重要。</span></p><p data-lake-id="u163e3c40" id="u163e3c40"><span data-lake-id="u3cbb3735" id="u3cbb3735">​</span><br></p><p data-lake-id="uc1aa1c0c" id="uc1aa1c0c"><span data-lake-id="ub5af0e36" id="ub5af0e36">In their classic text on the C programming language [61], Kernighan and Ritchie introduce readers to C using the hello program shown in Figure 1.1.</span></p><p data-lake-id="uaa71ce8e" id="uaa71ce8e"><span data-lake-id="uc17cc693" id="uc17cc693">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%23include%20%3Cstdio.h%3E%20%5Cnint%20main()%20%7B%5Cn%5Cn%20%20printf(%5C%22hello%2C%20world%5C%5Cn%5C%22)%3B%5Cn%5Cn%20%20return%200%3B%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Night%20Owl%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ruzT7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9e983e6c" id="u9e983e6c"><span data-lake-id="u52a59716" id="u52a59716"> </span><span data-lake-id="u7e00b628" id="u7e00b628" style="background-color: #BA9BF2">Although</span><span data-lake-id="u1925599f" id="u1925599f">  hello is a very simple program, </span><u><span data-lake-id="ub7664ba7" id="ub7664ba7">every major part of the system</span></u><span data-lake-id="u61fcf8b3" id="u61fcf8b3">   </span><u><span data-lake-id="u7e26cba9" id="u7e26cba9">must work in  </span></u><span style="color: #B62536"><u><span data-lake-id="ufffcefa7" id="ufffcefa7">concert </span></u></span><span style="color: #B62536"><u><sup><span data-lake-id="uc7a0a906" id="uc7a0a906">音乐会，使协调</span></sup></u></span><u><span data-lake-id="u85fc3c28" id="u85fc3c28"> </span></u><span data-lake-id="u1b769a11" id="u1b769a11">  </span><u><span data-lake-id="ud21aea14" id="ud21aea14">in order （for it） to run to completion</span></u><span data-lake-id="u38996c16" id="u38996c16">. </span></p><blockquote data-lake-id="u81ab534d" id="u81ab534d"><p data-lake-id="u044649b5" id="u044649b5"><span data-lake-id="u969fd202" id="u969fd202">对于这个程序，为了能完整运行，系统的每个主要组成部分，必须协调工作。</span></p></blockquote><p data-lake-id="u1995cf80" id="u1995cf80"><span data-lake-id="u1c51eacb" id="u1c51eacb">​</span><br></p><p data-lake-id="u65804d75" id="u65804d75"><span data-lake-id="u95daac49" id="u95daac49">In a sense, the goal of this book is to help you understand what happens and why when you run hello on your system.</span></p><p data-lake-id="uf0576d77" id="uf0576d77"><span data-lake-id="u5e0e291f" id="u5e0e291f">​</span><br></p><p data-lake-id="udcb21529" id="udcb21529"><span data-lake-id="uf36f1989" id="uf36f1989">We begin our study of systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates. </span></p><p data-lake-id="u7d42ef94" id="u7d42ef94"><span data-lake-id="u8c9cdeff" id="u8c9cdeff">​</span><br></p><p data-lake-id="uc6228ad1" id="uc6228ad1"><span data-lake-id="ue28f4638" id="ue28f4638">As we follow the lifetime of the program, we will brieﬂy introduce the key concepts, </span><span data-lake-id="u156f3ac6" id="u156f3ac6" style="color: #B62536">terminology</span><span data-lake-id="ubc828386" id="ubc828386">, and </span><u><span data-lake-id="u60d10ac4" id="u60d10ac4">components that come into play </span></u><sup><span data-lake-id="u6de9e3e9" id="u6de9e3e9">发挥作用的组件</span></sup><span data-lake-id="uee2a20bb" id="uee2a20bb">. Later chapters will expand on these ideas.</span></p><p data-lake-id="u8c5d8670" id="u8c5d8670"><br></p><p data-lake-id="u9ddf24d9" id="u9ddf24d9"><br></p><p data-lake-id="u0d33ef91" id="u0d33ef91"><span data-lake-id="ufb904854" id="ufb904854">​</span><br></p>',body_draft_lake:'<!doctype lake><meta name="doc-version" content="1" /><meta name="typography" content="classic" /><meta name="viewport" content="fixed" /><meta name="defaultFontsize" content="16" /><meta name="paragraphSpacing" content="relax" /><p data-lake-id="u16d76fdc" id="u16d76fdc"><span data-lake-id="u9f1a886e" id="u9f1a886e">computer system consists of hardware and systems software  </span><u><span data-lake-id="u67760662" id="u67760662">that</span></u><span data-lake-id="ue0f26516" id="ue0f26516">  work together to run application programs.  Speciﬁc implementations of systems change over time, but the  </span><span data-lake-id="u07a7691b" id="u07a7691b" style="color: #DF2A3F">underlying</span><span data-lake-id="u1f385a5c" id="u1f385a5c">  concepts do not.  All computer systems have similar hardware and software components </span><u><span data-lake-id="u3a7ec8cc" id="u3a7ec8cc">that</span></u><span data-lake-id="u336a4a9c" id="u336a4a9c">  perform similar functions. This book is written for programmers  </span><u><span data-lake-id="u665da331" id="u665da331">who</span></u><span data-lake-id="u28176ac2" id="u28176ac2">  want to get better at their </span><span data-lake-id="ufbd280c4" id="ufbd280c4" style="color: #CA3F4F">craft </span><sup><span data-lake-id="u63c939e0" id="u63c939e0" style="color: #CA3F4F">技能，手艺</span></sup><span data-lake-id="u4fd95c03" id="u4fd95c03"> by understanding </span><u><span data-lake-id="u821a4682" id="u821a4682">how</span></u><span data-lake-id="ud8084549" id="ud8084549"> these components work and </span><u><span data-lake-id="u01fc4334" id="u01fc4334">how</span></u><span data-lake-id="ub0a7ea3b" id="ub0a7ea3b"> they affect the correctness and performance of their programs.</span></p><p data-lake-id="uebc954d6" id="uebc954d6"><br></p><p data-lake-id="ub0d7c930" id="ub0d7c930"><span data-lake-id="ucab391fc" id="ucab391fc">You are poised for an exciting journey. If you </span><u><span data-lake-id="u7d3cdd6a" id="u7d3cdd6a">dedicate</span></u><span data-lake-id="u54885064" id="u54885064"> yourself </span><u><span data-lake-id="uf21538e3" id="uf21538e3">to</span></u><span data-lake-id="u028ae3a4" id="u028ae3a4"> learning the concepts in this book, then you will be on your way to becoming a rare “power programmer,”  enlightened by an understanding of the underlying computer system </span><u><span data-lake-id="u746bc931" id="u746bc931">and</span></u><span data-lake-id="u0b3782c4" id="u0b3782c4"> its impact on your application programs.</span></p><p data-lake-id="u0da0a0c9" id="u0da0a0c9"><span data-lake-id="u8f34d4be" id="u8f34d4be">​</span><br></p><p data-lake-id="uc5911dc8" id="uc5911dc8"><span data-lake-id="uc9acb7f4" id="uc9acb7f4">You are going to learn practical skills </span><u><span data-lake-id="u8b1e0b2f" id="u8b1e0b2f">such as</span></u><span data-lake-id="u956d8975" id="u956d8975"> how to avoid strange</span><sup><span data-lake-id="ua07344d1" id="ua07344d1">奇怪的，仔细看单词</span></sup><span data-lake-id="ue671dc4f" id="ue671dc4f"> numerical errors caused by </span><code data-lake-id="u7f116bb2" id="u7f116bb2"><span data-lake-id="uecf57402" id="uecf57402">the way</span></code><span data-lake-id="u7eff88fc" id="u7eff88fc">  </span><u><span data-lake-id="u7547273a" id="u7547273a">that</span></u><span data-lake-id="u9ea5375d" id="u9ea5375d"> computers represent numbers.  </span></p><p data-lake-id="u03fc805b" id="u03fc805b"><span data-lake-id="uefd74e9f" id="uefd74e9f">​</span><br></p><p data-lake-id="u8d351ac6" id="u8d351ac6"><span data-lake-id="u015e83cb" id="u015e83cb">You will learn how to optimize your C code by using </span><span data-lake-id="u80e210df" id="u80e210df" style="color: #CA3F4F">clever</span><span data-lake-id="u74f2af56" id="u74f2af56"> tricks  </span><u><span data-lake-id="u5ba29b58" id="u5ba29b58">that</span></u><span data-lake-id="u471d4917" id="u471d4917">  </span><span data-lake-id="uf8a8b87e" id="uf8a8b87e" style="color: #CA3F4F">exploit</span><sup><span data-lake-id="u5b7aaaed" id="u5b7aaaed" style="color: #CA3F4F">充分利用</span></sup><span data-lake-id="u7b278c65" id="u7b278c65">  the designs of modern processors and memory systems.  </span></p><p data-lake-id="u735ed5b9" id="u735ed5b9"><span data-lake-id="ucaad5d79" id="ucaad5d79">​</span><br></p><p data-lake-id="udf90c650" id="udf90c650"><span data-lake-id="ue0f926f7" id="ue0f926f7">You will learn </span><span data-lake-id="u1a9224cc" id="u1a9224cc" style="color: #E4495B; background-color: #F3BB2F">how</span><span data-lake-id="ua44b5990" id="ua44b5990"> the compiler implements procedure calls </span><span data-lake-id="ub039a201" id="ub039a201" style="background-color: #F3BB2F">and how</span><span data-lake-id="u31387bd0" id="u31387bd0"> to use this knowledge to avoid the security holes from </span><code data-lake-id="u4b9ddd90" id="u4b9ddd90"><span data-lake-id="u4b72a343" id="u4b72a343"> buffer overﬂow vulnerabilities</span></code><span data-lake-id="u354dcc3a" id="u354dcc3a"> </span><span data-lake-id="u4429bd7f" id="u4429bd7f" style="background-color: #C29219">that</span><span data-lake-id="udf1cfd08" id="udf1cfd08">  </span><span data-lake-id="u67dc2085" id="u67dc2085" style="color: #B62536">plague</span><span data-lake-id="u996fc6fa" id="u996fc6fa"> network and Internet software.  </span></p><p data-lake-id="u4c2bac0c" id="u4c2bac0c"><br></p><p data-lake-id="ud79de948" id="ud79de948"><span data-lake-id="u6c610c54" id="u6c610c54">You will learn how to recognize and avoid </span><u><span data-lake-id="u500b57c7" id="u500b57c7">the </span></u><span style="color: #B62536"><u><span data-lake-id="uec7a8c7e" id="uec7a8c7e">nasty</span></u></span><u><span data-lake-id="u30eda136" id="u30eda136"> errors during linking</span></u><span data-lake-id="ud1457cdd" id="ud1457cdd"> （ </span><span data-lake-id="uf994bb5b" id="uf994bb5b" style="background-color: #BA9BF2">that</span><span data-lake-id="u6db8f52e" id="u6db8f52e">  </span><span data-lake-id="udbfcfc8a" id="udbfcfc8a" style="color: #B62536">confound</span><span data-lake-id="ua1f3f3ea" id="ua1f3f3ea"> the </span><span data-lake-id="ud404ccaa" id="ud404ccaa" style="color: #B62536">average</span><sup><span data-lake-id="uadb23a0c" id="uadb23a0c">普通的，不是平庸的</span></sup><span data-lake-id="ueae1ff5a" id="ueae1ff5a"> programmer. ）</span></p><p data-lake-id="ub72c8021" id="ub72c8021"><br></p><p data-lake-id="u490bf641" id="u490bf641"><span data-lake-id="u5ef58ed4" id="u5ef58ed4">You will learn how to write your own Unix shell, your own </span><u><span data-lake-id="u292aab3e" id="u292aab3e">dynamic storage </span></u><span style="color: #B62536"><u><span data-lake-id="u01d54b53" id="u01d54b53">allocation</span></u></span><u><span data-lake-id="uaefd5ec7" id="uaefd5ec7"> package </span></u><u><sup><span data-lake-id="u8035409f" id="u8035409f">动态存储分配包 </span></sup></u><u><span data-lake-id="u6e42c5b6" id="u6e42c5b6">,</span></u><span data-lake-id="ub7fb15a8" id="ub7fb15a8"> and even your own Web server. </span></p><p data-lake-id="u7a25d41a" id="u7a25d41a"><br></p><p data-lake-id="u94bae4f4" id="u94bae4f4"><span data-lake-id="u39f679c9" id="u39f679c9">You will learn the promises and </span><span data-lake-id="u21905891" id="u21905891" style="color: #B62536">pitfalls</span><span data-lake-id="u8f259c4b" id="u8f259c4b"> of </span><span data-lake-id="u5002ee6b" id="u5002ee6b" style="color: #B62536">concurrency</span><span data-lake-id="ue6fc45d7" id="ue6fc45d7">,  a topic of increasing importance  </span><span data-lake-id="u5429e290" id="u5429e290" style="background-color: #3A1C73">as</span><span data-lake-id="uec9e5522" id="uec9e5522">  multiple processor cores are integrated onto single chips.</span></p><p data-lake-id="ue86491a3" id="ue86491a3"><span data-lake-id="u45e05e49" id="u45e05e49">你将学习并发的陷阱和希望，这个主题随着 单个芯片上集成的多核处理器变得越来越重要。</span></p><p data-lake-id="u163e3c40" id="u163e3c40"><span data-lake-id="u3cbb3735" id="u3cbb3735">​</span><br></p><p data-lake-id="uc1aa1c0c" id="uc1aa1c0c"><span data-lake-id="ub5af0e36" id="ub5af0e36">In their classic text on the C programming language [61], Kernighan and Ritchie introduce readers to C using the hello program shown in Figure 1.1.</span></p><p data-lake-id="uaa71ce8e" id="uaa71ce8e"><span data-lake-id="uc17cc693" id="uc17cc693">​</span><br></p><card type="inline" name="codeblock" value="data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%23include%20%3Cstdio.h%3E%20%5Cnint%20main()%20%7B%5Cn%5Cn%20%20printf(%5C%22hello%2C%20world%5C%5Cn%5C%22)%3B%5Cn%5Cn%20%20return%200%3B%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Night%20Owl%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ruzT7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D"></card><p data-lake-id="u9e983e6c" id="u9e983e6c"><span data-lake-id="u52a59716" id="u52a59716"> </span><span data-lake-id="u7e00b628" id="u7e00b628" style="background-color: #BA9BF2">Although</span><span data-lake-id="u1925599f" id="u1925599f">  hello is a very simple program, </span><u><span data-lake-id="ub7664ba7" id="ub7664ba7">every major part of the system</span></u><span data-lake-id="u61fcf8b3" id="u61fcf8b3">   </span><u><span data-lake-id="u7e26cba9" id="u7e26cba9">must work in  </span></u><span style="color: #B62536"><u><span data-lake-id="ufffcefa7" id="ufffcefa7">concert </span></u></span><span style="color: #B62536"><u><sup><span data-lake-id="uc7a0a906" id="uc7a0a906">音乐会，使协调</span></sup></u></span><u><span data-lake-id="u85fc3c28" id="u85fc3c28"> </span></u><span data-lake-id="u1b769a11" id="u1b769a11">  </span><u><span data-lake-id="ud21aea14" id="ud21aea14">in order （for it） to run to completion</span></u><span data-lake-id="u38996c16" id="u38996c16">. </span></p><blockquote data-lake-id="u81ab534d" id="u81ab534d"><p data-lake-id="u044649b5" id="u044649b5"><span data-lake-id="u969fd202" id="u969fd202">对于这个程序，为了能完整运行，系统的每个主要组成部分，必须协调工作。</span></p></blockquote><p data-lake-id="u1995cf80" id="u1995cf80"><span data-lake-id="u1c51eacb" id="u1c51eacb">​</span><br></p><p data-lake-id="u65804d75" id="u65804d75"><span data-lake-id="u95daac49" id="u95daac49">In a sense, the goal of this book is to help you understand what happens and why when you run hello on your system.</span></p><p data-lake-id="uf0576d77" id="uf0576d77"><span data-lake-id="u5e0e291f" id="u5e0e291f">​</span><br></p><p data-lake-id="udcb21529" id="udcb21529"><span data-lake-id="uf36f1989" id="uf36f1989">We begin our study of systems by tracing the lifetime of the hello program, from the time it is created by a programmer, until it runs on a system, prints its simple message, and terminates. </span></p><p data-lake-id="u7d42ef94" id="u7d42ef94"><span data-lake-id="u8c9cdeff" id="u8c9cdeff">​</span><br></p><p data-lake-id="uc6228ad1" id="uc6228ad1"><span data-lake-id="ue28f4638" id="ue28f4638">As we follow the lifetime of the program, we will brieﬂy introduce the key concepts, </span><span data-lake-id="u156f3ac6" id="u156f3ac6" style="color: #B62536">terminology</span><span data-lake-id="ubc828386" id="ubc828386">, and </span><u><span data-lake-id="u60d10ac4" id="u60d10ac4">components that come into play </span></u><sup><span data-lake-id="u6de9e3e9" id="u6de9e3e9">发挥作用的组件</span></sup><span data-lake-id="uee2a20bb" id="uee2a20bb">. Later chapters will expand on these ideas.</span></p><p data-lake-id="u8c5d8670" id="u8c5d8670"><br></p><p data-lake-id="u9ddf24d9" id="u9ddf24d9"><br></p><p data-lake-id="u0d33ef91" id="u0d33ef91"><span data-lake-id="ufb904854" id="ufb904854">​</span><br></p>',public:1,status:1,view_status:0,read_status:1,likes_count:0,comments_count:0,content_updated_at:"2023-03-11T05:09:48.000Z",deleted_at:null,created_at:"2023-03-11T05:00:40.000Z",updated_at:"2023-03-11T05:09:48.000Z",published_at:"2023-03-11T05:09:48.000Z",first_published_at:"2023-03-11T05:00:40.056Z",word_count:545,cover:null,description:"computer system consists of hardware and systems software  that  work together to run application programs.  Speciﬁc implementations of systems cha...",custom_description:null,hits:0,_serializer:"v2.doc_detail"}],c=o("",2),u=["href"],g=JSON.parse('{"title":"index","description":"","frontmatter":{"layout":"home-features-after","title":"index","urlname":"kygex8","date":"2022-08-01 11:02:18 +0800","tags":[],"categories":[]},"headers":[],"relativePath":"index.md"}'),r={name:"index.md"},A=Object.assign(r,{setup(h){return(b,f)=>(a(),e("div",null,[c,(a(!0),e(n,null,d(i(p),t=>(a(),e("ul",null,[s("li",null,[s("a",{href:"/yuque/"+t.title+".html"},l(t.title),9,u)])]))),256))]))}});export{g as __pageData,A as default};
