import{_ as e,o,c,V as a}from"./chunks/framework.c7a3dc5c.js";const m=JSON.parse('{"title":"从Vue3 框架视角来看前端框架设计需要的 核心要素","description":"","frontmatter":{},"headers":[],"relativePath":"post/0002.md"}'),d={name:"post/0002.md"},t=a('<p>#前端 #前端框架 #vue</p><h1 id="从vue3-框架视角来看前端框架设计需要的-核心要素" tabindex="-1">从Vue3 框架视角来看前端框架设计需要的 <code>核心要素</code> <a class="header-anchor" href="#从vue3-框架视角来看前端框架设计需要的-核心要素" aria-label="Permalink to &quot;从Vue3 框架视角来看前端框架设计需要的 `核心要素`&quot;">​</a></h1><p>对于开发一个前端框架来说，有哪些<code>核心要素</code>呢？ 如下：</p><h2 id="_1、开发体验" tabindex="-1">1、开发体验 <a class="header-anchor" href="#_1、开发体验" aria-label="Permalink to &quot;1、开发体验&quot;">​</a></h2><p><strong>报错警告提示，是否能够让开发者立马定位到问题</strong></p><ul><li>比如 如何提示 <code>App.mount(&#39;#app&#39;)</code> 中 <code>#app</code> 节点 不存在</li></ul><p><strong>开发调试是否直观？</strong></p><ul><li>比如<code>const obj = ref()</code> ，每次都是打印 <code>obj</code>的值都需要 <code>obj.value</code> ? 框架层面肯定需要提供好的 log 方式。 <ul><li>DevTools 提供 <code>custom formmaters</code> ，框架层面会提供 <code>initCustomFormatter</code> 的定义</li></ul></li></ul><h2 id="_2、控制框架代码体积" tabindex="-1">2、控制框架代码体积 <a class="header-anchor" href="#_2、控制框架代码体积" aria-label="Permalink to &quot;2、控制框架代码体积&quot;">​</a></h2><p>如何做到开发环境下更多提示，而不增加代码体积呢？</p><p>需要使用 <code>roolup 插件</code> 或者 <code>webpack 插件</code> 的 <code>__DEV__常量</code> 来做到这一点，生成环境下形成 <code>dead code</code> , 在使用打包工具 <code>tree-shaking</code> 的能力，进行移除</p><blockquote><p>[!tip] <code>dead code</code> 即 永远不会执行的代码，如 <code>if(true)</code> 或者 <code>import 后没使用的模块</code>等</p></blockquote><h2 id="_3、良好的-tree-shaking-机制" tabindex="-1">3、良好的 <code>tree-shaking</code> 机制 <a class="header-anchor" href="#_3、良好的-tree-shaking-机制" aria-label="Permalink to &quot;3、良好的 `tree-shaking` 机制&quot;">​</a></h2><p>上面说的<code>dead code</code> 很容易 被 <code>tree-shaking</code>掉，但是<code>副作用</code> 呢，因为 <code>proxy</code> 能力<code>只读每个属性</code>也可能引起<code>副作用</code>。</p><p>答案是：<code>/*#__PURE__*/</code> ， <code>rollup</code> 和 <code>webpack</code> 、<code>terser</code> 都可以识别它 ，它告诉 打包工具，<code>放心 tree-shaking 掉吧</code></p><h2 id="_4、多种环境下的构建产物不一样" tabindex="-1">4、多种环境下的构建产物不一样 <a class="header-anchor" href="#_4、多种环境下的构建产物不一样" aria-label="Permalink to &quot;4、多种环境下的构建产物不一样&quot;">​</a></h2><p>比如：</p><ul><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>iife</code> 给 <code>script</code> 标签直接使用</li><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>esm</code> 给 <code>&lt;script type=&quot;module&quot;&gt;</code> 直接使用</li><li><code>rollup</code> 下，设置 <code>format</code> 为 <code>cjs</code> 给 nodejs 环境使用 ，为了 SSR</li></ul><p>另外，如何打包给 <code>rollup</code> 或者 <code>webpack</code> 工具使用呢？ 答案是 <code>esm</code> , 但又如何 与 <code>&lt;script type=&quot;module&quot;&gt;</code> 区别呢？ 看 package.json , 如下 <code>代码</code> 和 <code>图片</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/vue.runtime.esm-bundler.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202303191018366.png" alt="image.png"></p><h2 id="_5、支持特性开关" tabindex="-1">5、支持特性开关 <a class="header-anchor" href="#_5、支持特性开关" aria-label="Permalink to &quot;5、支持特性开关&quot;">​</a></h2><p>比如vue3的 <code>组合式 API</code> 和 <code>选项式 API</code>， 如果用户确定只需要使用 <code>组合式 API</code> ，那么可以通过 设置 <code>_<wbr>_VUE_OPTIONS_API__</code> 预定于常量来开启或者关闭.</p><h2 id="_6、错误处理机制" tabindex="-1">6、错误处理机制 <a class="header-anchor" href="#_6、错误处理机制" aria-label="Permalink to &quot;6、错误处理机制&quot;">​</a></h2><p>比如一个工具库提供一个 <code>fetch</code> 方法 ，但使用的方式必须传入回调 <code>fetch(callback)</code>，怎么容错呢？三种</p><ol><li>用户自己 <code>try catch</code>，但是如果有很多方法，需要每个都 <code>try catch</code> 吗</li><li>用户自己实现一个 <code>handleError</code> 方法</li><li>工具库提一个 <code>utils.registerErrorHandler</code> 静态方法, 用户使用它注册错误处理程序。</li></ol><p>第 3 种，就是 Vue 的处理方式，<code>app.config.errorHandler</code> , 为用户提供更好的框架层面的健壮性。</p><h2 id="_7、typescript-支持" tabindex="-1">7、Typescript 支持 <a class="header-anchor" href="#_7、typescript-支持" aria-label="Permalink to &quot;7、Typescript 支持&quot;">​</a></h2><p>完善 Typescript 支持，可能比框架本身还要花精力和时间</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li>《Vue.js 设计与实现》<p style="margin-top:24px;text-align:right;color:var(--vp-c-text-3);font-size:12px;"><i>Last updated：2023.06.03</i></p></li></ul>',31),s=[t];function l(r,p,n,i,u,h){return o(),c("div",null,s)}const D=e(d,[["render",l]]);export{m as __pageData,D as default};
