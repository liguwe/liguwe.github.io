import{_ as s,o as a,c as n,b as e}from"./app.c60a45d1.js";const A=JSON.parse('{"title":"0009.FE.为什么要用 setTimeout 模拟 setInterval ？","description":"","frontmatter":{"title":"0009.FE.为什么要用 setTimeout 模拟 setInterval ？","urlname":"ip5hmhbt5sdgsue6","date":"2023-03-25 07:37:56 +0800","tags":[],"categories":[]},"headers":[{"level":2,"title":"先说说 setInterval   的问题","slug":"先说说-setinterval-的问题","link":"#先说说-setinterval-的问题","children":[]},{"level":2,"title":"再看看 setTimeout","slug":"再看看-settimeout","link":"#再看看-settimeout","children":[]},{"level":2,"title":"使用setTimeout   来模拟  setInterval","slug":"使用settimeout-来模拟-setinterval","link":"#使用settimeout-来模拟-setinterval","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"relativePath":"yuque/ip5hmhbt5sdgsue6.md"}'),l={name:"yuque/ip5hmhbt5sdgsue6.md"},o=e(`<h1 id="为什么要用-settimeout-模拟-setinterval" tabindex="-1">为什么要用 setTimeout 模拟 setInterval ？ <a class="header-anchor" href="#为什么要用-settimeout-模拟-setinterval" aria-hidden="true">#</a></h1><h2 id="先说说-setinterval-的问题" tabindex="-1">先说说 <code>setInterval</code>   的问题 <a class="header-anchor" href="#先说说-setinterval-的问题" aria-hidden="true">#</a></h2><p><code>setInterval(fn, N)</code>;   即<code>fn()</code> 将会在 <code>N</code> 秒之后被推入<code>任务队列</code>，但是每次推之前，都要判断看<code>上次的任务是否还在队列中</code>，如果在，则不添加。所以 <code>setInterval</code> 有两个<code>缺点</code>：</p><ul><li>使用 <code>setInterval</code> 时，某些间隔会<code>被跳过</code>；</li><li>甚至可能多个定时器会<code>连续执行</code> ，即刚好在两个队列的缝隙时，会<code>连续执行</code></li></ul><h2 id="再看看-settimeout" tabindex="-1">再看看 <code>setTimeout</code> <a class="header-anchor" href="#再看看-settimeout" aria-hidden="true">#</a></h2><p>一个经典案例：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>为什么是<code>一秒后输出了 5 个 5</code> 呢？ <code>for</code> 是<code>主线程代码</code>，先执行完了，才轮到执行 <code>setTimeout</code></p><p>每个 <code>setTimeout</code> 产生的新的任务会直接 <code>push</code> 到<code>任务队列</code>中。而且它是<code>一次性</code>的，</p><p>或者换个思路，<code>setInterval</code> 循环执行，链路长，不好控制，而 <code>setTimeout</code> 只是延时<code>一次</code> ，方便控制。</p><h2 id="使用settimeout-来模拟-setinterval" tabindex="-1">使用<code>setTimeout</code>   来模拟  <code>setInterval</code> <a class="header-anchor" href="#使用settimeout-来模拟-setinterval" aria-hidden="true">#</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mySetInterval</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">timeout</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//&lt;/div&gt;:关键，标识是否继续,并返回</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    flag</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//&lt;/div&gt;: 两次 settimeout，需要闭包定义一个函数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">func</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 测试</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> timer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">mySetInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">log 1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">timer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">flag</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>[!danger] 手写这种代码时，<code>套路</code> 就是 函数 里 再定义一个函数，形成<code>闭包</code>，另外需要<code>返回 定时标识</code>，另外一定会有递归，比如这里的 <code>func</code></p></blockquote><h2 id="最后" tabindex="-1">最后 <a class="header-anchor" href="#最后" aria-hidden="true">#</a></h2><p>再次强调，定时器指定的<code>时间间隔</code>，表示的是 <code>何时将定时器的代码添加到消息队列</code>，而<code>不是何时执行代码</code>。 所以真正何时执行代码的时间是不能保证的，取决于<code>何时被主线程的事件循环取到，并执行</code>.</p><p>W3C 在 HTML 标准中规定，规定要求 <code>setTimeout</code> 中低于<code>4ms</code>的时间间隔算为<code>4ms</code>。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><ul><li><a href="https://juejin.cn/post/6914201197620494350" target="_blank" rel="noreferrer">https://juejin.cn/post/6914201197620494350</a></li></ul>`,18),p=[o];function t(c,r,i,F,y,D){return a(),n("div",null,p)}const C=s(l,[["render",t]]);export{A as __pageData,C as default};
