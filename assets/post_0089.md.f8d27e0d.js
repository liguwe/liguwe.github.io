import{_ as e,o as s,c as t,V as a,C as o}from"./chunks/framework.5e406744.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"post/0089.md","filePath":"post/0089.md"}'),l={name:"post/0089.md"},c=a('<hr><p>#算法</p><h2 id="一、数据结构的分类" tabindex="-1">一、数据结构的分类 <a class="header-anchor" href="#一、数据结构的分类" aria-label="Permalink to &quot;一、数据结构的分类&quot;">​</a></h2><p>数据结构可以从<strong>逻辑结构</strong>和<strong>物理结构</strong>两个维度进行分类</p><h3 id="一-按组成数据元素之前的逻辑结构关系分类-线性与非线性" tabindex="-1">（一）按组成数据元素之前的逻辑结构关系分类：线性与非线性 <a class="header-anchor" href="#一-按组成数据元素之前的逻辑结构关系分类-线性与非线性" aria-label="Permalink to &quot;（一）按组成数据元素之前的逻辑结构关系分类：线性与非线性&quot;">​</a></h3><p>即：<strong>数据元素之间的逻辑关系是线性的或者非线性的</strong>， 如</p><ul><li>数组与链表 是线性的</li><li>树，体现祖先与后代之间的派生关系，是非线性的</li><li>图，由节点和边构成，反映了复杂的网络关系，也是非线性的</li></ul><p>具体分类如下图：</p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307301129786.png" alt="image.png|570"></p><p><strong>非线性数据结构</strong>可以进一步被划分为 <code>树形结构</code> 和 <code>网状结构</code>。</p><p>==总结：按逻辑结构分类：线性与非线性==</p><ul><li>线性结构 ：数组、链表、队列、栈、哈希表，元素存在<strong>一对一</strong>的顺序关系。</li><li>非线性结构： <ul><li>树形结构 ：树、堆、哈希表，元素存在<strong>一对多</strong>的关系。</li><li>网状结构 ：图，元素存在<strong>多对多</strong>的关系。</li></ul></li></ul><h3 id="二-按物理结构分类-连续与离散" tabindex="-1">（二）按物理结构分类：连续与离散 <a class="header-anchor" href="#二-按物理结构分类-连续与离散" aria-label="Permalink to &quot;（二）按物理结构分类：连续与离散&quot;">​</a></h3><p>在数据结构与算法的设计中，算法所占用的<strong>内存峰值</strong>不应超过 <strong>系统剩余空闲内存</strong>；所以如果运行的程序很多并且缺少大量连续的内存空间，那么所选用的数据结构必须能够存储在<strong>离散的内存空间内</strong>。相反，可以存储到<strong>连续的内存空间</strong></p><p><strong>「物理结构」</strong> 反映了数据在计算机内存中的<strong>存储方式</strong> ，如下图：</p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307301141007.png" alt="image.png|600"></p><blockquote><p>注意上图中的 <code>节点指针</code> 与 <code>节点值</code></p></blockquote><p><strong>所有数据结构都是基于数组、链表或二者的组合实现的</strong></p><ul><li>基于<code>数组</code>可实现 ：栈、队列、哈希表、树、堆、图、矩阵、张量（维度的数组）等</li><li>基于<code>链表</code>可实现 ：栈、队列、哈希表、树、堆、图等。</li></ul><p>按照数据结构在初始化后，是否可对其长度进行调整，又可以分为：</p><ul><li>静态数据结构，即 基于数组实现的数据结构</li><li>动态数据结构，即 基于链表实现的数据结构</li></ul><h2 id="二、基本数据类型" tabindex="-1">二、基本数据类型 <a class="header-anchor" href="#二、基本数据类型" aria-label="Permalink to &quot;二、基本数据类型&quot;">​</a></h2><p><strong>基本数据类型</strong>提供了数据的 <strong>内容类型</strong>，而 <strong>数据结构</strong> 提供了数据的 <strong>组织方式</strong>，如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JavaScript 的数组数据结构 可以自由存储各种 【基本数据类型】 和 对象</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><strong>基本数据类型是 CPU 可以直接进行运算的类型，在算法中直接被使用</strong>，下表列举了各种基本数据类型的占用空间、取值范围和默认值</p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307301200166.png" alt="image.png|705"></p><blockquote><p>1、现代计算机 CPU 通常将 <code>1 字节</code>作为 <code>最小寻址内存单元</code>。因此，即使表示<code>布尔量</code>仅需 1 位（0 或 1 ）， 它在内存中通常被存储为 1 字节。</p><p>2、<code>1 bytes = 8 bits</code> , 可以表示 <code>2^8</code> 个不同的数字</p></blockquote><h2 id="三、数字编码" tabindex="-1">三、数字编码 <a class="header-anchor" href="#三、数字编码" aria-label="Permalink to &quot;三、数字编码&quot;">​</a></h2><blockquote><p><code>1 byte</code> 的取值范围是 <code>[-128,127]</code> 为什么不是 <code>[-128,128]</code>？ 它 内在原因涉及到<strong>原码、反码、补码</strong>的相关知识</p></blockquote><h3 id="一-原码、反码、补码" tabindex="-1">（一）原码、反码、补码 <a class="header-anchor" href="#一-原码、反码、补码" aria-label="Permalink to &quot;（一）原码、反码、补码&quot;">​</a></h3><ul><li>原码： <ul><li><strong>最高位</strong>：视为<code>符号位</code>，其中 <code>0</code> 表示正数，<code>1</code> 表示负数</li><li><strong>其余位</strong>：表示数字的</li></ul></li><li>反码： <ul><li><strong>正数</strong>的反码与其原码相同</li><li><strong>负数</strong>的反码是对其原码除符号位外的所有位取反。</li></ul></li><li>补码： <ul><li><strong>正数</strong>的补码与其原码相同</li><li><strong>负数</strong>的补码是在其反码的基础上加 <code>1</code></li></ul></li></ul><p>以上总结就是，如下图：</p><ul><li>正数的原码、反码、补码相同</li><li>负数的原码、反码、补码需要转化 <ul><li>反码：除符号位外的所有位<code>取反</code></li><li>补码：反码的基础上加 <code>1</code></li></ul></li></ul><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307310907423.png" alt="image.png|765"></p><p><strong>原码</strong> 最直观，但数字以<strong>补码</strong>存到计算机中，为什么呢？这是因为<strong>原码的 2 个局限性</strong></p><p>1、 <code>负数的原码</code>不能直接用于运算，如 <code>1 + (-2)</code> 不应该等于 <code>-1</code> 吗 ？但使用原码计算为 <code>-3</code></p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307310913474.png" alt="image.png|300"></p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202307310916903.png" alt="image.png|360|360"></p><p>2、数字<code>零</code> 的原码有 <code>+0</code> 和 <code>-0</code> 两种表示方式 ， 即 <strong>正 0 和 负 0 的原码不同，但补码相同</strong></p><h3 id="二-为什么是-128-127-128-的特殊性" tabindex="-1">（二）为什么是 <code>[-128,127]</code> ，128 的特殊性 <a class="header-anchor" href="#二-为什么是-128-127-128-的特殊性" aria-label="Permalink to &quot;（二）为什么是 `[-128,127]` ，128 的特殊性&quot;">​</a></h3><p>这里，再来回答 <code>1 byte</code> 的取值范围是 <code>[-128,127]</code> 为什么不是 <code>[-127,127]</code>？</p><p>因为， <code>[-127,127]</code> 区间内，所有整数的源码，反码、及补码都可以相互转化，但是 <code>-128</code> 的补码是 <code>1000 0000</code> ，与 <code>+0</code> 的补码相同，所以计算机规定 <strong>补码1000 0000 没有原码，它代表 -128</strong></p><p>总之，<code>-128</code>的补码比较特殊，和 <code>+0</code> 冲突了，计算机做特殊处理。</p><h3 id="三-计算机所有运算都是加法" tabindex="-1">（三）计算机所有运算都是加法 <a class="header-anchor" href="#三-计算机所有运算都是加法" aria-label="Permalink to &quot;（三）计算机所有运算都是加法&quot;">​</a></h3><p><strong>计算机内部的硬件电路主要是基于加法运算设计的</strong>。这是因为加法运算相对于其他运算（比如乘法、除法和减法）来说，硬件实现起来更简单，更容易进行并行化处理，从而提高运算速度；如：</p><ul><li>减法：如 <code>a - b</code> 其实就是 <code>a + (-b)</code></li><li>乘法和除法：可以转换为计算多次加法或减法</li></ul><h3 id="四-计算机使用补码的原因" tabindex="-1">（四）计算机使用补码的原因 <a class="header-anchor" href="#四-计算机使用补码的原因" aria-label="Permalink to &quot;（四）计算机使用补码的原因&quot;">​</a></h3><p>我们可以总结出<strong>计算机使用补码的原因</strong>：基于补码表示，计算机可以用同样的<strong>电路</strong>和操作来处理正数和负数的加法，不需要设计特殊的硬件电路来处理减法，并且无需特别处理正负零的歧义问题。这大大简化了硬件设计，并提高了运算效率。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://www.hello-algo.com/chapter_data_structure/" target="_blank" rel="noreferrer">https://www.hello-algo.com/chapter_data_structure/</a></li></ul><hr>',51),i=o("div",{class:"liguwe-doc-footer"},[o("div",{class:"liguwe-doc-footer-edit-link"},[o("p",{class:"liguwe-doc-footer-p"},[o("svg",{t:"1687912573060",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"1498"},[o("path",{d:"M854.6 370.6c-9.9-39.4 9.9-102.2 73.4-124.4l-67.9-3.6s-25.7-90-143.6-98c-117.8-8.1-194.9-3-195-3 0.1 0 87.4 55.6 52.4 154.7-25.6 52.5-65.8 95.6-108.8 144.7-1.3 1.3-2.5 2.6-3.5 3.7C319.4 605 96 860 96 860c245.9 64.4 410.7-6.3 508.2-91.1 20.5-0.2 35.9-0.3 46.3-0.3 135.8 0 250.6-117.6 245.9-248.4-3.2-89.9-31.9-110.2-41.8-149.6z m-204.1 334c-10.6 0-26.2 0.1-46.8 0.3l-23.6 0.2-17.8 15.5c-47.1 41-104.4 71.5-171.4 87.6-52.5 12.6-110 16.2-172.7 9.6 18-20.5 36.5-41.6 55.4-63.1 92-104.6 173.8-197.5 236.9-268.5l1.4-1.4 1.3-1.5c4.1-4.6 20.6-23.3 24.7-28.1 9.7-11.1 17.3-19.9 24.5-28.6 30.7-36.7 52.2-67.8 69-102.2l1.6-3.3 1.2-3.4c13.7-38.8 15.4-76.9 6.2-112.8 22.5 0.7 46.5 1.9 71.7 3.6 33.3 2.3 55.5 12.9 71.1 29.2 5.8 6 10.2 12.5 13.4 18.7 1 2 1.7 3.6 2.3 5l5 17.7c-15.7 34.5-19.9 73.3-11.4 107.2 3 11.8 6.9 22.4 12.3 34.4 2.1 4.7 9.5 20.1 11 23.3 10.3 22.7 15.4 43 16.7 78.7 3.3 94.6-82.7 181.9-182 181.9z","p-id":"1499",fill:"#10b981"})]),o("a",{href:"https://www.yuque.com/liguwe/post/0089",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," View this page on Yuque ")]),o("p",{class:"liguwe-doc-footer-p"},[o("svg",{t:"1687927073703",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"1464"},[o("path",{d:"M512 96l480 832H32z","p-id":"1465",fill:"#10b981"})]),o("a",{href:"https://liguwe.vercel.app/post/0089.html",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," View this page on Vercel ")]),o("p",{class:"liguwe-doc-footer-p"},[o("svg",{t:"1687913054251",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"5173"},[o("path",{d:"M853.333333 501.333333c-17.066667 0-32 14.933333-32 32v320c0 6.4-4.266667 10.666667-10.666666 10.666667H170.666667c-6.4 0-10.666667-4.266667-10.666667-10.666667V213.333333c0-6.4 4.266667-10.666667 10.666667-10.666666h320c17.066667 0 32-14.933333 32-32s-14.933333-32-32-32H170.666667c-40.533333 0-74.666667 34.133333-74.666667 74.666666v640c0 40.533333 34.133333 74.666667 74.666667 74.666667h640c40.533333 0 74.666667-34.133333 74.666666-74.666667V533.333333c0-17.066667-14.933333-32-32-32z",fill:"#10b981","p-id":"5174"}),o("path",{d:"M405.333333 484.266667l-32 125.866666c-2.133333 10.666667 0 23.466667 8.533334 29.866667 6.4 6.4 14.933333 8.533333 23.466666 8.533333h8.533334l125.866666-32c6.4-2.133333 10.666667-4.266667 14.933334-8.533333l300.8-300.8c38.4-38.4 38.4-102.4 0-140.8-38.4-38.4-102.4-38.4-140.8 0L413.866667 469.333333c-4.266667 4.266667-6.4 8.533333-8.533334 14.933334z m59.733334 23.466666L761.6 213.333333c12.8-12.8 36.266667-12.8 49.066667 0 12.8 12.8 12.8 36.266667 0 49.066667L516.266667 558.933333l-66.133334 17.066667 14.933334-68.266667z",fill:"#10b981","p-id":"5175"})]),o("a",{href:"https://github.com/liguwe/liguwe.github.io/blob/master/docs/0089.md",target:"_blank",class:"liguwe-doc-footer-edit-link-a"},"Edit this page on Github")]),o("p",{class:"liguwe-doc-footer-p"},[o("svg",{t:"1687912510038",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"2280"},[o("path",{d:"M746.666667 106.666667a192 192 0 0 1 192 192v373.333333a192 192 0 0 1-192 192h-107.925334l-97.749333 90.496a42.666667 42.666667 0 0 1-57.984 0L385.28 864H277.333333a192 192 0 0 1-192-192V298.666667a192 192 0 0 1 192-192h469.333334z m0 64H277.333333a128 128 0 0 0-128 128v373.333333a128 128 0 0 0 128 128h107.925334a64 64 0 0 1 43.477333 17.045333L512 894.122667l83.264-77.077334a64 64 0 0 1 43.477333-17.045333H746.666667a128 128 0 0 0 128-128V298.666667a128 128 0 0 0-128-128zM512 426.666667a54.677333 54.677333 0 0 1 54.634667 54.698666A54.677333 54.677333 0 0 1 512 536.064a54.677333 54.677333 0 0 1-54.634667-54.698667A54.677333 54.677333 0 0 1 512 426.666667z m-196.693333 0a54.677333 54.677333 0 0 1 54.634666 54.698666 54.677333 54.677333 0 0 1-54.613333 54.698667 54.677333 54.677333 0 0 1-54.634667-54.698667A54.677333 54.677333 0 0 1 315.306667 426.666667z m393.386666 0a54.677333 54.677333 0 0 1 54.613334 54.698666 54.677333 54.677333 0 0 1-54.613334 54.698667 54.677333 54.677333 0 0 1-54.634666-54.698667A54.677333 54.677333 0 0 1 708.672 426.666667z",fill:"#10b981","p-id":"2281"})]),o("a",{href:"https://github.com/liguwe/liguwe.github.io/issues/new?title=0089.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84@%E7%AE%97%E6%B3%95&labels=liguwe.site",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," Comment this page on GitHub Issues ")]),o("p",{class:"liguwe-doc-footer-p"},[o("svg",{t:"1687912510038",class:"icon",viewBox:"0 0 1024 1024",version:"1.1",xmlns:"http://www.w3.org/2000/svg","p-id":"2280"},[o("path",{d:"M746.666667 106.666667a192 192 0 0 1 192 192v373.333333a192 192 0 0 1-192 192h-107.925334l-97.749333 90.496a42.666667 42.666667 0 0 1-57.984 0L385.28 864H277.333333a192 192 0 0 1-192-192V298.666667a192 192 0 0 1 192-192h469.333334z m0 64H277.333333a128 128 0 0 0-128 128v373.333333a128 128 0 0 0 128 128h107.925334a64 64 0 0 1 43.477333 17.045333L512 894.122667l83.264-77.077334a64 64 0 0 1 43.477333-17.045333H746.666667a128 128 0 0 0 128-128V298.666667a128 128 0 0 0-128-128zM512 426.666667a54.677333 54.677333 0 0 1 54.634667 54.698666A54.677333 54.677333 0 0 1 512 536.064a54.677333 54.677333 0 0 1-54.634667-54.698667A54.677333 54.677333 0 0 1 512 426.666667z m-196.693333 0a54.677333 54.677333 0 0 1 54.634666 54.698666 54.677333 54.677333 0 0 1-54.613333 54.698667 54.677333 54.677333 0 0 1-54.634667-54.698667A54.677333 54.677333 0 0 1 315.306667 426.666667z m393.386666 0a54.677333 54.677333 0 0 1 54.613334 54.698666 54.677333 54.677333 0 0 1-54.613334 54.698667 54.677333 54.677333 0 0 1-54.634666-54.698667A54.677333 54.677333 0 0 1 708.672 426.666667z",fill:"#10b981","p-id":"2281"})]),o("a",{href:"https://github.com/liguwe/liguwe.github.io/discussions/new?category=general&labels=liguwe.site&title=0089.%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84@%E7%AE%97%E6%B3%95",target:"_blank",class:"liguwe-doc-footer-edit-link-a"}," Discuss this page on GitHub Discussions ")])]),o("p",{class:"liguwe-doc-footer-update-time"},[o("i",null,"Last updated：2023.07.30")]),o("div",{id:"liguwe-comment"})],-1),n=[c,i];function r(p,d,g,h,u,m){return s(),t("div",null,n)}const f=e(l,[["render",r]]);export{w as __pageData,f as default};
