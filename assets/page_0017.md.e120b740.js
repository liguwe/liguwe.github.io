import{_ as s,o as a,c as o,O as l}from"./chunks/framework.97fbe135.js";const A=JSON.parse('{"title":"Vue的非原始值响应式方案","description":"","frontmatter":{},"headers":[],"relativePath":"page/0017.md"}'),e={name:"page/0017.md"},n=l(`<p>#vue</p><h1 id="vue的非原始值响应式方案" tabindex="-1">Vue的非原始值响应式方案 <a class="header-anchor" href="#vue的非原始值响应式方案" aria-label="Permalink to &quot;Vue的非原始值响应式方案&quot;">​</a></h1><p>前文讲了 [[0012篇：Vue 的响应式的系统设计原理]] ，本文，主要讲解更复杂场景 ，比如</p><ul><li>如何拦截 <code>for-in</code> ?</li><li>如何拦截 <code>Map WeakMap Set WeakSet</code> 等？</li></ul><h2 id="一、先看看-proxy-与-reflect" tabindex="-1">一、先看看 <code>Proxy</code> 与 <code>Reflect</code> <a class="header-anchor" href="#一、先看看-proxy-与-reflect" aria-label="Permalink to &quot;一、先看看 \`Proxy\` 与 \`Reflect\`&quot;">​</a></h2><h3 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h3><p>拦截对象的 <code>读 get 、取 set</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">value</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>拦截函数的<code>调用 apply</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">thisArg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">argArray</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">thisArg</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">argArray</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="复合操作" tabindex="-1">复合操作 <a class="header-anchor" href="#复合操作" aria-label="Permalink to &quot;复合操作&quot;">​</a></h3><p>读取一个对象的方法，如 <code>obj.fn()</code> ， 分两步：</p><ul><li>先 <code>get</code> 读取 <code>obj.fn</code></li><li>然后<code>apply</code> 调用，<code>obj.fn()</code></li></ul><h3 id="reflect" tabindex="-1">Reflect <a class="header-anchor" href="#reflect" aria-label="Permalink to &quot;Reflect&quot;">​</a></h3><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151627304.png" alt="image.png"></p><blockquote><p><code>Reflect</code> 与 <code>Proxy</code> 的 API 一一对应，比如 <code>get / set / apply</code> 等</p></blockquote><p><code>Reflect</code> 还接受<code>第三个参数</code>，如下：</p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151634228.png" alt="image.png"></p><p>前文 [[0012篇：Vue 的响应式的系统设计原理]] 的<code> Effect</code> 函数，如果对于下面的数据结构有问题，<code>无法正常收集响应信息</code>。这时候就需要用到 <code>Reflect 的第三个参数了</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">foo</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><blockquote><p>具体解决方法，代码见 Demo 仓库</p></blockquote><h2 id="二、javascript-对象-与-proxy-对象" tabindex="-1">二、Javascript 对象 与 Proxy 对象 <a class="header-anchor" href="#二、javascript-对象-与-proxy-对象" aria-label="Permalink to &quot;二、Javascript 对象 与 Proxy 对象&quot;">​</a></h2><h3 id="如何判断是-普通对象-还是函数对象" tabindex="-1">如何判断是 <code>普通对象</code> 还是<code>函数对象</code> <a class="header-anchor" href="#如何判断是-普通对象-还是函数对象" aria-label="Permalink to &quot;如何判断是 \`普通对象\` 还是\`函数对象\`&quot;">​</a></h3><p>JS 中一切都是对象，函数也是对象，那么如何区分呢？</p><ul><li>对象真正语义由<code>内部方法</code>实现，即对对象进行某个操作时，引擎内部实际调用的方法，对用户是不可见的</li></ul><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151708966.png" alt="image.png"></p><p>如上图，是 常规对象 的 <code>内部方法</code>，下面是<code>函数对象的内部方法</code></p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151710430.png" alt="image.png"></p><p>所以，根据是否部署 <code>[[Call]]</code> 方法，就可以判断是 <code>普通对象</code> 还是<code>函数对象</code></p><blockquote><p><a href="https://262.ecma-international.org/#sec-ordinary-and-exotic-objects-behaviours" target="_blank" rel="noreferrer">https://262.ecma-international.org/#sec-ordinary-and-exotic-objects-behaviours</a></p></blockquote><h3 id="常规对象-与-异质对象" tabindex="-1"><code>常规对象</code> 与 <code>异质对象</code> <a class="header-anchor" href="#常规对象-与-异质对象" aria-label="Permalink to &quot;\`常规对象\` 与 \`异质对象\`&quot;">​</a></h3><p>ES 规范，JS 中有<code>两种对象</code>：</p><ul><li><code>常规对象</code></li><li><code>异质对象</code>： 如 Proxy 对象，如下图：</li></ul><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151717703.png" alt="image.png"></p><ul><li><code>[[Call]]</code> 和 <code>[[construct]]</code> 两个内部方法只有被代理对象是函数和构造函数时才会调用</li><li>内部方法的<code>多态性</code> 即 普通对象 和 Proxy 都有 <code>[[Get]]</code> ，但规范定义是完全不同的。</li></ul><blockquote><p><a href="https://262.ecma-international.org/#sec-proxy-object-internal-methods-and-internal-slots" target="_blank" rel="noreferrer">https://262.ecma-international.org/#sec-proxy-object-internal-methods-and-internal-slots</a></p></blockquote><h3 id="示例-代理-delete-操作" tabindex="-1">示例：代理 <code>delete</code> 操作 <a class="header-anchor" href="#示例-代理-delete-操作" aria-label="Permalink to &quot;示例：代理 \`delete\` 操作&quot;">​</a></h3><p>所以根据以上可知，可通过下面的方式 <code>拦截删除属性操作</code></p><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151748456.png" alt="image.png"> \`\`</p><blockquote><p>[!bug] 注意：需要删除被 <code>proxy</code> 的对象，才会拦截，如下图，下面的方式就不会 <strong>自己丢到坑里了，搞了一会，才发现都写错了</strong></p></blockquote><p><img src="https://od-1310531898.cos.ap-beijing.myqcloud.com/202304151749441.png" alt="image.png"></p><h2 id="三、如何代理-object" tabindex="-1">三、如何代理 Object <a class="header-anchor" href="#三、如何代理-object" aria-label="Permalink to &quot;三、如何代理 Object&quot;">​</a></h2><p>如何拦截对象的<code>一切读取操作</code>，比如</p><ul><li>访问属性：<code>obj.foo</code> ， <code>obj[&#39;foo&#39;]</code><ul><li><code>Proxy get</code></li></ul></li><li><code>in</code>操作符：<code>foo in obj</code><ul><li>根据 ECMA-262中，in 操作符运算时的逻辑，通过 <code>Proxy has</code> 拦截</li></ul></li><li>遍历：<code>for(const key in obj)</code><ul><li>还是通过规范可知，使用<code> Proxy ownKeys 操作</code> 可拦截</li></ul></li><li>删除某个属性： <code>delete p.foo</code><ul><li>通过看规范可知，可通过拦截 <code>Proxy deleteProperty </code> 拦截</li></ul></li></ul>`,44),p=[n];function c(t,r,i,y,d,D){return a(),o("div",null,p)}const C=s(e,[["render",c]]);export{A as __pageData,C as default};
